<?xml version="1.0" encoding="UTF-8"?>
<beans
     xmlns="http://www.springframework.org/schema/beans"
     xmlns:beans="http://www.springframework.org/schema/beans"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:cc="http://www.capeclear.com/assembly/10"
     xmlns:cloud="urn:com.workday/esb/cloud/10.0"
     xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
     xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
     xmlns:pi="urn:com.workday/picof"
     xmlns:wd="urn:com.workday/bsvc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 
	<cc:assembly id="WorkdayAssembly" version="2019.6">
        <cc:local-out id="PIM_Debug_Stats_109" execute-when="props['globalLogCountDebug'] > 0" endpoint="vm://wcc/PutIntegrationMessage" propagate-abort="false">
            <cc:set name="is.message.severity" value="'DEBUG'"/>
            <cc:set name="is.message.summary" value="props['globalLogCountDebug'] + ' debug message(s) added!  See attached file for details.'"/>
        </cc:local-out>
        <cc:local-out id="PIM_Info_Stats_109" execute-when="props['globalLogCountInfo'] > 0" routes-response-to="PIM_Debug_Stats_109" endpoint="vm://wcc/PutIntegrationMessage" propagate-abort="false">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="props['globalLogCountInfo'] + ' informational message(s) added!  See attached file for details.'"/>
        </cc:local-out>
        <cc:local-out id="PIM_Warning_Stats_109" execute-when="props['globalLogCountWarn'] > 0" routes-response-to="PIM_Info_Stats_109" endpoint="vm://wcc/PutIntegrationMessage" propagate-abort="false">
            <cc:set name="is.message.severity" value="'WARNING'"/>
            <cc:set name="is.message.summary" value="props['globalLogCountWarn'] + ' warning(s) encountered!  See attached file for details.'"/>
        </cc:local-out>
        <cc:local-out id="PIM_Error_Stats_109" execute-when="props['globalLogCountError'] > 0" routes-response-to="PIM_Warning_Stats_109" endpoint="vm://wcc/PutIntegrationMessage" propagate-abort="false">
            <cc:set name="is.message.severity" value="'ERROR'"/>
            <cc:set name="is.message.summary" value="props['globalLogCountError'] + ' error(s) encountered!  See attached file for details.'"/>
        </cc:local-out>
        <cc:local-out id="PIM_Critical_Stats_109" execute-when="props['globalLogCountCritical'] > 0" routes-response-to="PIM_Error_Stats_109" endpoint="vm://wcc/PutIntegrationMessage" propagate-abort="false">
            <cc:set name="is.message.severity" value="'CRITICAL'"/>
            <cc:set name="is.message.summary" value="props['globalLogCountCritical'] + ' critical error(s) encountered!  See attached file for details.'"/>
        </cc:local-out>
        <cc:local-in id="LogStats" routes-to="PIM_Critical_Stats_109" access="private"/>
        <cc:local-out id="Call_LogStats_109" execute-when="props['inLogFinalize']" endpoint="vm://INT133_Learning_Enrollment_Boomerang/LogStats"/>
        <cc:async-mediation id="OutputCloudLog_109" routes-to="Call_LogStats_109" execute-steps-when="vars['cloud-log-content'] != null &amp;&amp; props['globalLogCountByLogFile'] > 0 &amp;&amp; props['globalLogCountTotal'] > 0 &amp;&amp;&#xD;&#xA;(&#xD;&#xA;&#x9;(props['inLogFinalize'] == true) ||&#xD;&#xA;&#x9;(props['globalLogMaxCountPerFile'] > 0 &amp;&amp; props['globalLogCountByLogFile'] == props['globalLogMaxCountPerFile'])&#xD;&#xA;)">
            <cc:steps>
                <cc:eval id="Setup">
                    <cc:expression>props['globalLogFilesStored'] = props['globalLogFilesStored'] + 1</cc:expression>
                    <cc:expression>props['localLogFilenameForStorage'] = (props['globalLogMaxCountPerFile'] == 0) ? props['globalLogFilename'] # &quot;.html&quot; : props['globalLogFilename'] # &quot;_&quot; # props['globalLogFilesStored'] # &quot;.html&quot;</cc:expression>
                </cc:eval>
                <cc:store id="StoreCloudLog" input="variable" input-variable="cloud-log-content" createDocumentReference="true" expiresIn="@{props['globalLogExpires']}" title="@{props['localLogFilenameForStorage']}"/>
                <cc:eval id="Reset">
                    <cc:expression>vars['cloud-log-content'] = null</cc:expression>
                    <cc:expression>props['globalLogCountByLogFile'] = 0</cc:expression>
                    <cc:expression>foreach (propname : ['localLogFilenameForStorage']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="StoreLog" routes-to="OutputCloudLog_109" access="public">
            <cc:parameter default="false" name="inLogFinalize" required="true" type="boolean"/>
        </cc:local-in>
        <cc:local-out id="Call_StoreLog_109" endpoint="vm://INT133_Learning_Enrollment_Boomerang/StoreLog">
            <cc:set name="inLogFinalize" value="false"/>
        </cc:local-out>
        <cc:async-mediation id="WriteLog_109" routes-to="Call_StoreLog_109">
            <cc:steps>
                <cc:cloud-log id="LogDebugMsg" condition="props['inLogLevel'] == 'debug'" level="debug" message="@{props['inLogMessage']}" message-details="@{props['inLogMessageDetail']}" output-file-type="HTML" reference-id="props['inLogReferenceId']">
                    <cc:log-column key="LocalIn" label="Local In">@{props['inExtraLocalIn']}</cc:log-column>
                    <cc:log-column key="RecordNumber" label="Record Number">@{props['inExtraRecordNumber']}</cc:log-column>
                    <cc:log-column key="SupportData" label="Support Data">@{props['inExtraSupportData']}</cc:log-column>
                </cc:cloud-log>
                <cc:cloud-log id="LogInfoMsg" condition="props['inLogLevel'] == 'info'" level="info" message="@{props['inLogMessage']}" message-details="@{props['inLogMessageDetail']}" output-file-type="HTML" reference-id="props['inLogReferenceId']">
                    <cc:log-column key="LocalIn" label="Local In">@{props['inExtraLocalIn']}</cc:log-column>
                    <cc:log-column key="RecordNumber" label="Record Number">@{props['inExtraRecordNumber']}</cc:log-column>
                    <cc:log-column key="SupportData" label="Support Data">@{props['inExtraSupportData']}</cc:log-column>
                </cc:cloud-log>
                <cc:cloud-log id="LogWarnMsg" condition="props['inLogLevel'] == 'warn'" level="warn" message="@{props['inLogMessage']}" message-details="@{props['inLogMessageDetail']}" output-file-type="HTML" reference-id="props['inLogReferenceId']">
                    <cc:log-column key="LocalIn" label="Local In">@{props['inExtraLocalIn']}</cc:log-column>
                    <cc:log-column key="ErrorCode" label="Error Code">@{props['inExtraErrorCode']}</cc:log-column>
                    <cc:log-column key="RecordNumber" label="Record Number">@{props['inExtraRecordNumber']}</cc:log-column>
                    <cc:log-column key="SupportData" label="Support Data">@{props['inExtraSupportData']}</cc:log-column>
                </cc:cloud-log>
                <cc:cloud-log id="LogErrorMsg" condition="props['inLogLevel'] == 'error'" level="error" message="@{props['inLogMessage']}" message-details="@{props['inLogMessageDetail']}" output-file-type="HTML" reference-id="props['inLogReferenceId']">
                    <cc:log-column key="LocalIn" label="Local In">@{props['inExtraLocalIn']}</cc:log-column>
                    <cc:log-column key="ErrorCode" label="Error Code">@{props['inExtraErrorCode']}</cc:log-column>
                    <cc:log-column key="RecordNumber" label="Record Number">@{props['inExtraRecordNumber']}</cc:log-column>
                    <cc:log-column key="SupportData" label="Support Data">@{props['inExtraSupportData']}</cc:log-column>
                </cc:cloud-log>
                <cc:cloud-log id="LogCriticalMsg" condition="props['inLogLevel'] == 'critical'" level="critical" message="@{props['inLogMessage']}" message-details="@{props['inLogMessageDetail']}" output-file-type="HTML" reference-id="props['inLogReferenceId']">
                    <cc:log-column key="LocalIn" label="Local In">@{props['inExtraLocalIn']}</cc:log-column>
                    <cc:log-column key="ErrorCode" label="Error Code">@{props['inExtraErrorCode']}</cc:log-column>
                    <cc:log-column key="RecordNumber" label="Record Number">@{props['inExtraRecordNumber']}</cc:log-column>
                    <cc:log-column key="SupportData" label="Support Data">@{props['inExtraSupportData']}</cc:log-column>
                </cc:cloud-log>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="LogCounts_109" routes-to="WriteLog_109">
            <cc:steps>
                <cc:eval id="UpdateLogCounts">
						<cc:expression>(props['inLogLevel'] == 'debug') ? props['globalLogCountDebug'] = props['globalLogCountDebug'] + 1;</cc:expression>
						<cc:expression>(props['inLogLevel'] == 'info') ? props['globalLogCountInfo'] = props['globalLogCountInfo'] + 1;</cc:expression>
						<cc:expression>(props['inLogLevel'] == 'warn') ? props['globalLogCountWarn'] = props['globalLogCountWarn'] + 1;</cc:expression>
						<cc:expression>(props['inLogLevel'] == 'error') ? props['globalLogCountError'] = props['globalLogCountError'] + 1;</cc:expression>
						<cc:expression>(props['inLogLevel'] == 'critical') ? props['globalLogCountCritical'] = props['globalLogCountCritical'] + 1;</cc:expression>
                    <cc:expression>props['globalLogCountTotal'] = props['globalLogCountTotal'] + 1;</cc:expression>
                    <cc:expression>props['globalLogCountByLogFile'] = props['globalLogCountByLogFile'] + 1;</cc:expression>
					</cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="CreateLogEntry" routes-to="LogCounts_109" access="public">
            <cc:parameter name="inLogMessage" required="true" type="string"/>
            <cc:parameter default="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message" name="inLogMessageDetail" required="false" type="string"/>
            <cc:parameter name="inLogReferenceId" required="false" type="string"/>
            <cc:parameter name="inLogLevel" required="true" type="string" validation="props['inLogLevel'] == 'debug' ||&#xD;&#xA;props['inLogLevel'] == 'info' ||&#xD;&#xA;props['inLogLevel'] == 'warn' ||&#xD;&#xA;props['inLogLevel'] == 'error' ||&#xD;&#xA;props['inLogLevel'] == 'critical'"/>
            <cc:parameter default="context.errorComponentId" name="inExtraLocalIn" required="false" type="string"/>
            <cc:parameter name="inExtraRecordNumber" required="false" type="integer"/>
            <cc:parameter name="inExtraSupportData" required="false" type="string"/><cc:parameter name="inExtraErrorCode" required="false"/>
        </cc:local-in>
        <cc:local-out id="PIM_Info_Finish_109" endpoint="vm://wcc/PutIntegrationMessage" clone-request="true">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Initialization of logging component finished.'"/>
        </cc:local-out>
        <cc:local-out id="PIM_Critical_SetupFailure_109" routes-response-to="InitializeLog_Handler_109" endpoint="vm://wcc/PutIntegrationMessage" propagate-abort="false">
            <cc:set name="is.message.severity" value="'CRITICAL'"/>
            <cc:set name="is.message.summary" value="'Initialization of logging component failed.  Immediate halt to integration processing.'"/>
            <cc:set name="is.message.storage.enabled" value="false"/>
        </cc:local-out>
        <cc:async-mediation id="InitializeLog_Handler_109">
            <cc:steps>
                <cc:eval id="Abort">
						<cc:expression>context.setAbort(true);</cc:expression>
					</cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="InitializeLog_109" routes-to="PIM_Info_Finish_109">
            <cc:steps>
                <cc:eval id="SetupLog">
						<cc:expression>props['globalLogFilename'] = intsys.getAttribute('Log File Name (Exclude File Extension)') == empty ? 'Log' : intsys.getAttribute('Log File Name (Exclude File Extension)')</cc:expression>
						<cc:expression>props['globalLogExpires'] = intsys.getAttribute('Log Retention in Days') == empty ?  'P30D' : 'P' + intsys.getAttribute('Log Retention in Days') + 'D'</cc:expression>
         <cc:expression>props['globalLogMaxCountPerFile'] = intsys.getAttribute('Max Entries per Log File') == empty ? 0 : intsys.getAttribute('Max Entries per Log File')</cc:expression>
         <cc:expression>props['globalLogCountByLogFile'] = 0</cc:expression>
						<cc:expression>props['globalLogCountDebug'] = 0</cc:expression>
						<cc:expression>props['globalLogCountInfo'] = 0</cc:expression>
						<cc:expression>props['globalLogCountWarn'] = 0</cc:expression>
						<cc:expression>props['globalLogCountError'] = 0</cc:expression>
						<cc:expression>props['globalLogCountCritical'] = 0</cc:expression>
         <cc:expression>props['globalLogCountTotal'] = 0</cc:expression>
         <cc:expression>props['globalLogFilesStored'] = 0</cc:expression>
					</cc:eval>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="PIM_Critical_SetupFailure_109"/>
        </cc:async-mediation>
        <cc:local-out id="PIM_Info_Start_109" routes-response-to="InitializeLog_109" endpoint="vm://wcc/PutIntegrationMessage" clone-request="true" propagate-abort="false">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Initialization of logging component started.'"/>
        </cc:local-out>
        <cc:local-in id="SetupLog" routes-to="PIM_Info_Start_109" access="public"/>
        <cc:local-out id="Call_StoreLog_GEH" routes-response-to="Call_Debug_Finalize_GEH" endpoint="vm://INT133_Learning_Enrollment_Boomerang/StoreLog" propagate-abort="false">
            <cc:set name="inLogFinalize" value="true"/>
        </cc:local-out>
        <cc:local-out id="PIM_CriticalUnhandledException_GEH" routes-response-to="Call_StoreLog_GEH" endpoint="vm://wcc/PutIntegrationMessage" propagate-abort="false">
            <cc:set name="is.message.severity" value="'CRITICAL'"/>
            <cc:set name="is.message.summary" value="'An unhandled error was encountered!'"/>
            <cc:set name="is.message.detail" value="'Error Message: ' + context.getErrorMessage()"/>
        </cc:local-out>
        <cc:send-error id="GlobalErrorHandler" routes-to="PIM_CriticalUnhandledException_GEH"/>
        <cc:local-in id="SetupGlobalStarterKit" routes-to="InitializeCoreStarterKit_109" access="public"/>
        <cc:async-mediation id="InitializeCoreStarterKit_109">
            <cc:steps>
                <cc:eval id="Attributes">
                    <cc:expression>props['globalDocumentRetentionPeriod'] = 'P' # ((intsys.getAttribute('Document Retention in Days') == empty) ? '30' : intsys.getAttribute('Document Retention in Days')) # 'D';</cc:expression>
                </cc:eval>
                <cc:eval id="LaunchParameters">
                    <cc:expression>props['globalIsValidationMode'] = (lp.exists('Run in Validation Mode') ? (Boolean) lp.getSimpleData('Run in Validation Mode') : false);&#xD;
props['globalIsDebugMode'] = (lp.exists('Run with Debug Logging') ? (Boolean) lp.getSimpleData('Run with Debug Logging') : false);</cc:expression>
                </cc:eval>
                <cc:eval id="Debug">
                    <cc:expression>props['globalDebugPropertyList'] = new java.util.ArrayList();</cc:expression>
                    <cc:expression>props['globalDebugPropertyList'].add('globalDocumentRetentionPeriod');&#xD;
props['globalDebugPropertyList'].add('globalApiVersion');&#xD;
props['globalDebugPropertyList'].add('globalIsValidationMode');&#xD;
props['globalDebugPropertyList'].add('globalIsDebugMode');</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_StoreLog" store-message="none" routes-response-to="Call_Debug_Finalize" endpoint="vm://INT133_Learning_Enrollment_Boomerang/StoreLog">
            <cc:set name="inLogFinalize" value="true"/>
        </cc:local-out>
        <cc:local-out id="Call_Main" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Main" propagate-abort="false"/>
        <cc:local-out id="Call_SetupGlobal" store-message="none" routes-response-to="Call_IEP_10" endpoint="vm://INT133_Learning_Enrollment_Boomerang/SetupGlobal" unset-properties="false"/>
        <cc:local-out id="Call_SetupLog" store-message="none" routes-response-to="Call_SetupGlobal" endpoint="vm://INT133_Learning_Enrollment_Boomerang/SetupLog" propagate-abort="true"/>
        <cc:async-mediation id="Initialize_Handler">
            <cc:steps>
                <cc:eval id="Abort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_Initialize_Error" store-message="none" routes-response-to="Call_StoreLog_Initialize" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred within the integration flow and has been caught at the top-level just before the Global Error Handler.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="'InitializeCloudCollectionReference'"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="Initialize" routes-to="Call_SetupLog" continue-after-error="rewind" handle-downstream-errors="true">
            <cc:steps>
                <cc:eval id="SetValues">
                    <cc:expression>props['globalStudioStarterKitVersion'] = 'v1.0'; //This property is set for reference purposes only.  </cc:expression>
                    <cc:expression>props['globalApiVersion'] = 'v32.1';&#xD;
props['globalDebugArchiveFilename'] = 'DebugFiles_INT.zip';</cc:expression>
                    <cc:expression>props['globalStringDeduplicator'] = new com.workday.integrations.services.StringDeduplicator();</cc:expression>
                </cc:eval>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Initialize_Error"/>
        </cc:async-mediation>
        <cc:workday-in id="StartHere" routes-to="Initialize">
            <cc:integration-system name="INT133 Learning Enrollment Boomerang">
        <cloud:param name="Run in Validation Mode">
          <cloud:type>
            <cloud:simple-type>boolean</cloud:simple-type>
          </cloud:type>
          <cloud:default>
            <cloud:boolean>false</cloud:boolean>
          </cloud:default>
        </cloud:param>
        <cloud:param name="Run with Debug Logging">
          <cloud:type>
            <cloud:simple-type>boolean</cloud:simple-type>
          </cloud:type>
          <cloud:default>
            <cloud:boolean>false</cloud:boolean>
          </cloud:default>
        </cloud:param>
        <cloud:param name="Workers">
          <cloud:type>
            <cloud:class-report-field description="Workers" type="WID" singular="false">32461f91de7f48a2834c0411d40b518e</cloud:class-report-field>
          </cloud:type>
        </cloud:param>
        <cloud:param name="Predecessor Integration Event ID">
          <cloud:type>
            <cloud:simple-type>text</cloud:simple-type>
          </cloud:type>
        </cloud:param>
        <cloud:attribute-map-service name="INT133 Learning Enrollment Boomerang Attribute Map Service - General">
          <cloud:attribute name="Document Retention in Days">
            <cloud:type>
              <cloud:simple-type>number</cloud:simple-type>
            </cloud:type>
          </cloud:attribute>
          <cloud:attribute name="Delivery Document Tag">
            <cloud:type>
              <cloud:simple-type>text</cloud:simple-type>
            </cloud:type>
            <cloud:display-option>required-for-launch</cloud:display-option>
          </cloud:attribute>
          <cloud:attribute name="Maximum API Calls Before Starting New Event">
            <cloud:type>
              <cloud:simple-type>number</cloud:simple-type>
            </cloud:type>
          </cloud:attribute>
          <cloud:attribute name="Log New Event Start As Warning">
            <cloud:type>
              <cloud:simple-type>boolean</cloud:simple-type>
            </cloud:type>
          </cloud:attribute>
          <cloud:attribute name="File Name for Handover API Calls">
            <cloud:type>
              <cloud:simple-type>text</cloud:simple-type>
            </cloud:type>
            <cloud:display-option>required-for-launch</cloud:display-option>
          </cloud:attribute>
          <cloud:attribute name="Do Not Launch New Event">
            <cloud:type>
              <cloud:simple-type>boolean</cloud:simple-type>
            </cloud:type>
          </cloud:attribute>
        </cloud:attribute-map-service>
        <cloud:attribute-map-service name="INT133 Learning Enrollment Boomerang Attribute Map Service - Logging">
          <cloud:attribute name="Log File Name (Exclude File Extension)">
            <cloud:type>
              <cloud:simple-type>text</cloud:simple-type>
            </cloud:type>
          </cloud:attribute>
          <cloud:attribute name="Log Retention in Days">
            <cloud:type>
              <cloud:simple-type>number</cloud:simple-type>
            </cloud:type>
          </cloud:attribute>
          <cloud:attribute name="Max Entries per Log File">
            <cloud:type>
              <cloud:simple-type>number</cloud:simple-type>
            </cloud:type>
          </cloud:attribute>
        </cloud:attribute-map-service>
        <cloud:report-service name="INT133 Learning Enrollment Boomerang Report Service">
          <cloud:report-alias description="CR INT133 Campaigns" name="Campaign Data"/>
          <cloud:report-alias description="CR INT133 Digital Courses" name="Course Data"/>
          <cloud:report-alias description="CR INT133 Campaign Records Without Enrollment" name="Enrollment Data"/>
        </cloud:report-service>
      </cc:integration-system>
        </cc:workday-in>
        <cc:async-mediation id="InitializeGlobalSetup">
            <cc:steps>
                <cc:eval id="Attributes">
                    <cc:expression>props['globalDeliveryDocTag'] = ((intsys.getAttribute('Delivery Document Tag') == empty) ? null : intsys.getAttribute('Delivery Document Tag'));&#xD;
props['globalApiLimit'] = ((intsys.getAttribute('Maximum API Calls Before Starting New Event') == empty) ? 10000 : intsys.getAttribute('Maximum API Calls Before Starting New Event'));&#xD;
props['globalIsNewEventWarning'] = intsys.getAttributeAsBoolean('Log New Event Start As Warning');&#xD;
props['globalOutputFilename'] = ((intsys.getAttribute('File Name for Handover API Calls') == empty) ? null : intsys.getAttribute('File Name for Handover API Calls'));&#xD;
props['globalDoNotLaunch'] = intsys.getAttributeAsBoolean('Do Not Launch New Event');</cc:expression>
                </cc:eval>
                <cc:eval id="LaunchParameters">
                    <cc:expression>props['globalWorker'] = lp.exists('Workers') ? lp.getReferenceDataList('Workers', 'Employee_ID') : '';</cc:expression>
                    <cc:expression>props['globalPredecessorWID'] = lp.exists('Predecessor Integration Event ID') ? lp.getSimpleData('Predecessor Integration Event ID') : null;&#xD;
props['globalIntegrationEventWID'] = lp.integrationEventWID;</cc:expression>
                </cc:eval>
                <cc:eval id="UpdateDebug">
                    <cc:expression>props['globalDebugPropertyList'].add('globalWorker');&#xD;
props['globalDebugPropertyList'].add('globalPredecessorWID');&#xD;
props['globalDebugPropertyList'].add('globalDeliveryDocTag');&#xD;
props['globalDebugPropertyList'].add('globalApiLimit');&#xD;
props['globalDebugPropertyList'].add('globalIsNewEventWarning');&#xD;
props['globalDebugPropertyList'].add('globalOutputFilename');&#xD;
props['globalDebugPropertyList'].add('globalDoNotLaunch');</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_SetupGlobalStarterKit" store-message="none" routes-response-to="InitializeGlobalSetup" endpoint="vm://INT133_Learning_Enrollment_Boomerang/SetupGlobalStarterKit" unset-properties="false"/>
        <cc:local-in id="SetupGlobal" routes-to="Call_SetupGlobalStarterKit"/>
        <cc:async-mediation id="Results_Handler_103" routes-to="Results_AbortOnError_103">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outIsSoapError'] = 'logic';</cc:expression>
                </cc:eval>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_Results_103" store-message="none" routes-response-to="Results_Handler_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_103"/>
        <cc:local-out id="Call_CreateLogEntry_Results_Error_103" store-message="none" routes-response-to="Call_Debug_Results_SoapXslt_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while copying the SOAP results from the message rootpart to variable globalSoapResults.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="Results_103">
            <cc:steps>
                <cc:copy id="CopyMsgToVar" output="variable" output-mimetype="text/xml" output-variable="globalSoapResults"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Results_Error_103"/>
        </cc:async-mediation>
        <cc:async-mediation id="RouteError_Http_Handler_103" routes-to="RouteError_Http_AbortOnError_103">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outIsSoapError'] = 'http';</cc:expression>
                </cc:eval>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_HttpError_103" store-message="none" routes-response-to="RouteError_Http_Handler_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_103"/>
        <cc:local-out id="Call_CreateLogEntry_HttpError_Error_103" store-message="none" routes-response-to="Call_Debug_HttpError_SoapXslt_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while executing a SOAP request for the '# props['inWebServiceApplication'] #' application.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="CallSoap_Catch_103" routes-to="CallSoap_103" continue-after-error="rewind" handle-downstream-errors="true">
            <cc:steps/>
            <cc:send-error id="CatchError" routes-to="RouteError_103"/>
        </cc:async-mediation>
        <cc:workday-out-soap id="CallSoap_103" routes-response-to="Call_Debug_SoapResponse_103" application="@{props['inWebServiceApplication']}" version="@{props['inApiVersion']}"/>
        <cc:async-mediation id="Transform_Handler_103" routes-to="Transform_AbortOnError_103">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outIsSoapError'] = 'logic';</cc:expression>
                </cc:eval>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_Transform_103" store-message="none" routes-response-to="Transform_Handler_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_103"/>
        <cc:local-out id="Call_CreateLogEntry_Transform_Error_103" store-message="none" routes-response-to="Call_Debug_Transform_SoapXslt_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while preparing a SOAP service call.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="Transform_103" routes-to="Call_Debug_SoapXslt_103">
            <cc:steps>
                <cc:write id="WriteXSLT" output="variable" output-variable="localXsltSoapGenerator">
                    <cc:message>
                        <cc:static-file input-file="@{props['inPathToXsltFile']}"/>
                    </cc:message>
                </cc:write>
                <cc:xslt-plus id="WriteSoap" url="mctx:vars/localXsltSoapGenerator"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Transform_Error_103"/>
        </cc:async-mediation>
        <cc:async-mediation id="PrepareVariableInput_103" routes-to="Transform_103" execute-steps-when="props['localIsNonEmptyMapVariable']">
            <cc:steps>
                <cc:eval id="PrimeMessage">
                    <cc:expression>varname = props['inMapVariableName'];&#xD;
parts[0] = vars[varname];</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="PrepareMapInput_103" routes-to="PrepareVariableInput_103" execute-steps-when="(!props['localIsValuedProperty'] &amp;&amp; !props['localIsValuedVariable']) || props['localIsNonEmptyMapProperty']">
            <cc:steps>
                <cc:write id="PrimeMessage">
                    <cc:message>
                        <cc:text>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xD;
&lt;Root/></cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Validation_Handler_103" routes-to="Validation_AbortOnError_103">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outIsSoapError'] = 'logic';</cc:expression>
                </cc:eval>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_Validation_103" store-message="none" routes-response-to="Validation_Handler_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_103"/>
        <cc:local-out id="Call_CreateLogEntry_Validation_Error_103" store-message="none" routes-response-to="Call_Finally_Validation_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while validating the parameters for a SOAP service call.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:sync-mediation id="InitializeAndFinalize_103" routes-to="Call_BuildRequest_103" routes-response-to="Call_Finally_103">
            <cc:request-steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['outIsSoapError'] = '';</cc:expression>
                    <cc:expression>props['localExtraSupportData'] = (props['inLearnerId'] != empty || props['inCourseId'] != empty) ? &#xD;
	'Attempt to enroll Employee ID [' # props['inLearnerId'] # '] into Course with WID [' # props['inCourseId'] # ']' : &#xD;
	(props['inEventWID'] != empty) ?&#xD;
		'Attempt to rescind BP Event ID [' # props['inEventWID'] # ']' :&#xD;
		'';</cc:expression>
                </cc:eval>
            </cc:request-steps>
            <cc:response-steps/>
        </cc:sync-mediation>
        <cc:async-mediation id="Teardown_103">
            <cc:steps>
                <cc:set-headers id="ClearHeaders">
                    <cc:remove-headers>
                        <cc:remove-header name="x-validate-only"/>
                    </cc:remove-headers>
                    <cc:add-headers/>
                </cc:set-headers>
                <cc:eval id="CleanUp">
                    <cc:expression>foreach (propname : ['localIsValuedProperty','localIsDefinedProperty','localIsCorrectTypeProperty','localIsNonEmptyMapProperty','localIsValuedVariable','localIsDefinedVariable','localIsCorrectTypeVariable','localIsNonEmptyMapVariable','localExtraSupportData']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
                    <cc:expression>foreach (varname : ['localXsltSoapGenerator']) {&#xD;
	vars[varname] = null;&#xD;
}</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="Finally_103" routes-to="Teardown_103"/>
        <cc:local-out id="Call_Finally_103" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_103"/>
        <cc:local-in id="CallSoap" routes-to="InitializeAndFinalize_103" access="public">
            <cc:parameter default="props['globalApiVersion']" documentation="The version of the web service to be called, e.g. &quot;v30.0&quot;" name="inApiVersion" required="true" type="string"/>
            <cc:parameter documentation="The WWS application where the operation may be found, e.g. &quot;Human_Resources&quot;." name="inWebServiceApplication" required="true" type="string"/>
            <cc:parameter default="true" documentation="Sub-assembly supports pre-built, on-message requests as well as facilities to construct the request dynamically.  Set this parameter to true to bypass the dynamic request construction and use the message root part as the request.  If set to false, then the inPathToXsltFile and the inMapPropertyName or inMapVariableName parameters should be set." name="inUseMessageRootPartAsRequest" required="true" type="boolean"/><cc:parameter documentation="The file path relative to /ws/WSAR-INF for the XSLT file that will generate the SOAP request, e.g. &quot;xslt/GetWorkersRequest.xslt&quot;." name="inPathToXsltFile" required="!props['inUseMessageRootPartAsRequest']" type="string"/>
            <cc:parameter documentation="The java.util.Map instance that holds the key/value pairs of values to be used in the transform provided on the inPathToXsltFile parameter.  This is mutually-exclusive with inMapVariableName.  The transform will define pre-established keys for the parameterized portions of the soap request.  Those pre-established keys should be used as the keys in the map so that their corresponding values can be embedded into the soap request." name="inMapPropertyName" required="false" type="string"/>
            <cc:parameter documentation="The name of the context variable that holds the data values to be used in the transform provided on the inPathToXsltFile parameter.  This is mutually-exclusive with inMapPropertyName.  The XML stored in the variable must be compatible with the XSLT provided on inPathToXsltFile.  See aUnit tests for a generic example of a multi-iteration, multi-variable example." name="inMapVariableName" required="false" type="string"/>
            <cc:parameter default="props['globalIsValidationMode']" documentation="Controls whether or not the SOAP request is actually executed against the tenant or is only validated for potential errors." name="inValidateOnly" required="true" type="boolean"/><cc:parameter default="props['globalIsDebugMode']" documentation="Controls whether or not the SOAP request is output on debug." name="inDebugMode" required="true" type="boolean"/><cc:parameter default="false" documentation="Controls whether or not the abort flag is set on the context upon an error.  If this is set to true and an error occurs, then...  If the calling local-out is set to Propagate Abort = true on the Advanced tab, then the calling assembly will also abort.  If the calling local-out is set to Propagate Abort = false, then the calling assembly will not be aborted.  However, further calls into this sub-assembly will result in a &quot;Loop-detected in local-in&quot; exception being thrown to the top level error handler." name="inIsAbortOnError" required="false" type="boolean"/><cc:parameter default="props['inCourseId']" name="inCourseId" required="false" type="string"/><cc:parameter default="props['inLearnerId']" name="inLearnerId" required="false" type="string"/><cc:parameter default="props['inEventWID']" name="inEventWID" required="false" type="string"/>
        <cc:out-parameter documentation="A string to indicate that the request resulted in an error and identify the type.  If the error was at the API level, then outIsSoapError == 'http'.  If the error was at the tenant/application level, then outIsSoapError == 'soap'.  If there was an error unrelated to the API call, then outIsSoapError == 'logic'.  If there is no error, , then outIsSoapError == empty.  Further individual errors determined by Get_Event_Details or Get_Import_Processes are not handled here." name="outIsSoapError"/></cc:local-in>
        <cc:async-mediation id="StoreVariable_Handler_102">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_StoreVariable_Error_102" store-message="none" routes-response-to="StoreVariable_Handler_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while storing the RaaS results to a file attached to the Integration Event.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="StoreVariable_102" routes-to="StoreMessage_102" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; (props['inReturnResults'] == 'variable') &amp;&amp; !props['inCompressSavedResults']">
            <cc:steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localFilename'] = org.apache.commons.lang3.StringUtils.deleteWhitespace(props['inReportServiceAlias'] #'.xml');</cc:expression>
                </cc:eval>
                <cc:store id="StoreContent" output="message" output-mimetype="text/xml" input="variable" input-variable="globalRaaSResults" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['localFilename']}"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_StoreVariable_Error_102"/>
        </cc:async-mediation>
        <cc:async-mediation id="Results_Handler_102" routes-to="Results_AbortOnError_102">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_Results_102" store-message="none" routes-response-to="Results_Handler_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_102"/>
        <cc:local-out id="Call_CreateLogEntry_Results_Error_102" store-message="none" routes-response-to="Call_Finally_Results_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while copying the RaaS results from the message rootpart to variable globalRaaSResults.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="Results_102" routes-to="Call_CompressResult_102" execute-steps-when="props['inReturnResults'] == 'variable'">
            <cc:steps>
                <cc:copy id="CopyMsgToVar" output="variable" output-mimetype="text/xml" output-variable="globalRaaSResults"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Results_Error_102"/>
        </cc:async-mediation>
        <cc:async-mediation id="CallRaaS_Handler_102" routes-to="CallRaaS_AbortOnError_102">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_CallRaaS_102" store-message="none" routes-response-to="CallRaaS_Handler_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_102"/>
        <cc:local-out id="Call_CreateLogEntry_CallRaaS_Error_102" store-message="none" routes-response-to="Call_Finally_CallRaaS_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while executing reports-as-a-service for the '# props['inReportServiceAlias'] #' report alias.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="CallRaaS_Catch_102" routes-to="CallRaaS_102" continue-after-error="rewind" handle-downstream-errors="true">
            <cc:steps/>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_CallRaaS_Error_102"/>
        </cc:async-mediation>
        <cc:workday-out-rest id="CallRaaS_102" routes-response-to="Results_102" extra-path="@{props['localRestUrl']}" method="GET"/>
        <cc:async-mediation id="InitializeAndFinalize_Handler_102" routes-to="InitializeAndFinalize_AbortOnError_102">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_InitializeAndFinalize_102" store-message="none" routes-response-to="InitializeAndFinalize_Handler_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_102"/>
        <cc:local-out id="Call_CreateLogEntry_InitializeAndFinalize_Error_102" store-message="none" routes-response-to="Call_Finally_InitializeAndFinalize_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while preparing a reports-as-a-service call.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:sync-mediation id="InitializeAndFinalize_102" routes-to="Call_Debug_RaaSRequest_102" continue-after-error="rewind" handle-downstream-errors="true" routes-response-to="Call_Finally_102">
            <cc:request-steps>
                <cc:eval id="EvaluateParameters">
                    <cc:expression>props['localIsPromptsProvided'] = props['inPropertyNameReportPromptMap'] != empty;</cc:expression>
                    <cc:expression>props['localIsPromptsMap'] = (props['localIsPromptsProvided']) ? (context.getProperty(props['inPropertyNameReportPromptMap']) instanceof java.util.Map) : false;&#xD;
props['localIsPromptsEmpty'] = (props['localIsPromptsProvided']) ? (context.getProperty(props['inPropertyNameReportPromptMap']).isEmpty()) : false;</cc:expression>
                    <cc:expression>props['localIsPromptsValid'] = (!props['localIsPromptsProvided']) || (props['localIsPromptsMap'] &amp;&amp; !props['localIsPromptsEmpty']);</cc:expression>
                </cc:eval>
                <cc:validate-exp id="ValidateParameters">
                    <cc:expression error-number="10200" failure-message="The map contained in the property @{props['inPropertyNameReportPromptMap']} as specified on the input parameter inPropertyNameReportPromptMap was either empty, or it was not a map.">props['localIsPromptsValid']</cc:expression>
                </cc:validate-exp>
                <cc:eval id="BuildURL">
                    <cc:expression>props['localRestUrl'] = intsys.reportService.getExtrapath(props['inReportServiceAlias']);</cc:expression>
                    <cc:expression>props['localQuerystring'] = '';</cc:expression>
                    <cc:expression>if (props['localIsPromptsProvided']) {&#xD;
	props['localKeyValueMap'] = context.getProperty(props['inPropertyNameReportPromptMap']);&#xD;
&#xD;
	foreach (mapKey : props['localKeyValueMap'].keySet()) {&#xD;
		if (props['localQuerystring'] != empty) {props['localQuerystring'] = props['localQuerystring'] # '&amp;';}&#xD;
&#xD;
		mapValue = props['localKeyValueMap'].get(String.valueOf(mapKey));&#xD;
		if (mapValue instanceof java.util.List) {&#xD;
			props['localQuerystring'] = props['localQuerystring'] # String.valueOf(mapKey) # '=' # util.listToDelimString(mapValue, '!');&#xD;
		} else {&#xD;
			props['localQuerystring'] = props['localQuerystring'] # String.valueOf(mapKey) # '=' # String.valueOf(mapValue);&#xD;
		}&#xD;
	}&#xD;
	props['localRestUrl'] = props['localRestUrl'] # '?' # props['localQuerystring'];&#xD;
}</cc:expression>
                    <cc:expression>props['localIsValidUrlLength'] = props['localRestUrl'].getBytes().length &lt;= 16000;</cc:expression>
                </cc:eval>
                <cc:validate-exp id="ValidateURL">
                    <cc:expression error-number="10201" failure-message="The URL constructed including querystring parameters exceed the maximum URL length for RESTful RaaS calls of 16000 Bytes.">props['localIsValidUrlLength']</cc:expression>
                </cc:validate-exp>
            </cc:request-steps>
            <cc:response-steps/>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_InitializeAndFinalize_Error_102"/>
        </cc:sync-mediation>
        <cc:async-mediation id="Teardown_102">
            <cc:steps>
                <cc:eval id="CleanUp">
                    <cc:expression>foreach (propname : ['localIsPromptsProvided','localIsPromptsValid','localRestUrl','localQuerystring','localKeyValueMap','localIsPromptsMap','localIsPromptsEmpty','localFilename','localProgressedToAPI','localIsValidUrlLength']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
                    <cc:expression>foreach (varname : ['localUnwantedOutput','globalRaaSResultsCompressed']) {&#xD;
	vars[varname] = null;&#xD;
}</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="Finally_102" routes-to="Teardown_102"/>
        <cc:local-out id="Call_Finally_102" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_102"/>
        <cc:local-in id="CallRaaS" routes-to="InitializeAndFinalize_102" access="public">
            <cc:parameter documentation="The Report Service configuration from which to retrieve results." name="inReportServiceAlias" required="true" type="string"/>
            <cc:parameter default="false" documentation="Controls whether or not the RaaS results are saved to a file that is then attached to the Integration Event for support purposes." name="inSaveResultsToIntegrationEvent" required="true" type="boolean"/>
            <cc:parameter documentation="The name of the MediationContext property holding a key/value pair map of Report Prompt names and the associated values to use on the RaaS call.  If the report is not parameterized, then leave this input parameter empty.  If setting this input parameter though, the property name given MUST hold an instance of a java.util.Map, e.g. HashMap." name="inPropertyNameReportPromptMap" required="false" type="string"/><cc:parameter default="'variable'" documentation="How the RaaS results are returned to the caller, either on the message if the value is 'message', or in a variable given on the inReturnVariableName input parameter if the value is 'variable', which is the default." name="inReturnResults" required="true" type="string" validation="props['inReturnResults'] == 'variable' || props['inReturnResults'] == 'message'"/><cc:parameter default="props['globalIsDebugMode']" documentation="Controls whether or not the REST request is output on debug." name="inDebugMode" required="true" type="boolean"/><cc:parameter default="true" documentation="If the inSaveResultsToIntegrationEvent parameter is set to save the RaaS results to the Integration Event, then this will control if they are compressed before being saved.  A value of true will compress the results before saving, whereas a value of false will not." name="inCompressSavedResults" required="false" type="boolean"/><cc:parameter default="false" documentation="Controls whether or not the abort flag is set on the context upon an error.  If this is set to true and an error occurs, then...  If the calling local-out is set to Propagate Abort = true on the Advanced tab, then the calling assembly will also abort.  If the calling local-out is set to Propagate Abort = false, then the calling assembly will not be aborted.  However, further calls into this sub-assembly will result in a &quot;Loop-detected in local-in&quot; exception being thrown to the top level error handler." name="inIsAbortOnError" required="false" type="boolean"/>
        </cc:local-in>
        <cc:local-in id="Main" routes-to="Call_Debug_Properties_BeforeRaaS"/>
        <cc:local-in id="StoreResult_102" routes-to="StoreVariable_102"><cc:parameter name="inSaveResultsToIntegrationEvent" required="true" type="boolean"/><cc:parameter name="inReturnResults" required="true" type="string"/></cc:local-in>
        <cc:async-mediation id="StoreMessage_Handler_102">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_StoreMessage_Error_102" store-message="none" routes-response-to="StoreMessage_Handler_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while storing the RaaS results to a file attached to the Integration Event.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="StoreMessage_102" routes-to="StoreCompressed_102" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; (props['inReturnResults'] == 'message') &amp;&amp; !props['inCompressSavedResults']">
            <cc:steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localFilename'] = org.apache.commons.lang3.StringUtils.deleteWhitespace(props['inReportServiceAlias'] #'.xml');</cc:expression>
                </cc:eval>
                <cc:store id="StoreContent" output="variable" output-mimetype="text/xml" output-variable="localUnwantedOutput" input="message" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['localFilename']}"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_StoreMessage_Error_102"/>
        </cc:async-mediation>
        <cc:local-out id="Call_StoreResult_102" store-message="none" execute-when="props['inSaveResultsToIntegrationEvent']" endpoint="vm://INT133_Learning_Enrollment_Boomerang/StoreResult_102" clone-request="true"><cc:set name="inSaveResultsToIntegrationEvent" value="props['inSaveResultsToIntegrationEvent']"/><cc:set name="inReturnResults" value="props['inReturnResults']"/></cc:local-out>
        <cc:local-out id="Call_Finally_SoapError_103" store-message="none" routes-response-to="RouteError_Soap_Handler_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_103"/>
        <cc:local-out id="Call_CreateLogEntry_SoapError_Warn_103" store-message="none" routes-response-to="Call_Debug_SoapError_SoapXslt_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while executing a soap request for the '# props['inWebServiceApplication'] #' application.'"/>
            <cc:set name="inLogMessageDetail" value="'The API call resulted in the following SOAP fault: '# String.valueOf(parts[0].xpath('/SOAP-ENV:Envelope/SOAP-ENV:Body/SOAP-ENV:Fault/faultstring'))"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'warn'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
        <cc:set name="inExtraErrorCode" value="'10307'"/></cc:local-out>
        <cc:async-mediation id="RouteError_Soap_Handler_103" routes-to="RouteError_Soap_AbortOnError_103">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outIsSoapError'] = 'soap';</cc:expression>
                </cc:eval>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_StoreLog_Initialize" store-message="none" routes-response-to="Call_Debug_Initialize_Finalize" endpoint="vm://INT133_Learning_Enrollment_Boomerang/StoreLog">
            <cc:set name="inLogFinalize" value="true"/>
        </cc:local-out>
        <cc:local-in id="Debug" routes-to="Initialize_109"><cc:parameter default="'message'" documentation="The type of information to be output to the log." name="inTargetType" required="true" type="string" validation="props['inTargetType'] == 'message' || props['inTargetType'] == 'property' || props['inTargetType'] == 'properties' || props['inTargetType'] == 'variable' || &#xD;&#xA;&#x9;props['inTargetType'] == 'map' || props['inTargetType'] == 'list' || props['inTargetType'] == 'set' || props['inTargetType'] == 'finalize'"/><cc:parameter documentation="The reference name to use for single-named output types selected on inTargetType.  Required when inTargetType is one of: property, variable, list, map, or set." name="inTargetName" required="false" type="string" validation="(props['inTargetType'] == 'message' || props['inTargetType'] == 'property' || props['inTargetType'] == 'properties' || &#xD;&#xA;&#x9;props['inTargetType'] == 'variable' || props['inTargetType'] == 'map' || props['inTargetType'] == 'list' || props['inTargetType'] == 'set') &amp;&amp; &#xD;&#xA;(props['inTargetName'] != empty || props['inEntityName'] != empty)"/><cc:parameter default="props['globalStringDeduplicator']" documentation="This should be initialized in the global setup and can be simply passed in." name="inNameDeduplicator" required="true"/><cc:parameter documentation="A specific filename to use when exporting the message or variable content to a file zipped in a consolidated archive.  This is optional and only used when inTargetType is &quot;message&quot; or &quot;variable&quot;." name="inEntityName" required="false" type="string"/><cc:out-parameter name="outEntityName"/></cc:local-in>
        <cc:route id="RouteType_109">
            <cc:mvel-strategy>
                <cc:choose-route expression="props['inTargetType'] == 'message'" route="Message"/>
                <cc:choose-route expression="props['inTargetType'] == 'property'" route="Property"/>
                <cc:choose-route expression="props['inTargetType'] == 'properties'" route="Properties"/>
                <cc:choose-route expression="props['inTargetType'] == 'variable'" route="Variable"/>
                <cc:choose-route expression="props['inTargetType'] == 'map'" route="Map"/>
                <cc:choose-route expression="props['inTargetType'] == 'list'" route="List"/>
                <cc:choose-route expression="props['inTargetType'] == 'set'" route="Set"/>
                <cc:choose-route expression="props['inTargetType'] == 'finalize'" route="Finalize"/>
                <cc:choose-route expression="true" route="Undefined"/>
            </cc:mvel-strategy>
            <cc:sub-route name="Message" routes-to="Call_Aggregate_Message_109"/>
            <cc:sub-route name="Property" routes-to="Call_CreateLogEntry_Debug_Property_109"/>
            <cc:sub-route name="Properties" routes-to="Properties_InitializeAndFinalize_109"/>
            <cc:sub-route name="Variable" routes-to="Variable_InitializeAndFinalize_109"/>
            <cc:sub-route name="Map" routes-to="Map_InitializeAndFinalize_109"/>
            <cc:sub-route name="List" routes-to="List_InitializeAndFinalize_109"/>
            <cc:sub-route name="Set" routes-to="Set_InitializeAndFinalize_109"/>
            <cc:sub-route name="Finalize" routes-to="Call_Aggregate_Finalize_109"/>
            <cc:sub-route name="Undefined" routes-to="Call_CreateLogEntry_Warn_Undefined_109"/>
        </cc:route>
        <cc:local-out id="Call_CreateLogEntry_Warn_Undefined_109" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Undefined Debug Log'"/>
            <cc:set name="inLogMessageDetail" value="'RouteType_109 was not able to correctly process the inTargetType input parameter.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'warn'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_Debug_Variable_109" store-message="none" routes-response-to="Variable_Name_109" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Variable ' # props['inTargetName']"/>
            <cc:set name="inLogMessageDetail" value="'Variable '# props['inTargetName'] #' saved to debug file with name of ' # props['outEntityName']"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'debug'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_Debug_Property_109" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Property ' # props['inTargetName']"/>
            <cc:set name="inLogMessageDetail" value="propname = props['inTargetName'];&#xD;&#xA;String.valueOf(props[propname]);"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'debug'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_Debug_Message_109" store-message="none" routes-response-to="Message_Name_109" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Message RootPart'"/>
            <cc:set name="inLogMessageDetail" value="'Message root part saved to debug file with name of ' # props['outEntityName']"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'debug'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_Debug_Properties_109" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="parts[0].xpath('/p/k')"/>
            <cc:set name="inLogMessageDetail" value="parts[0].xpath('/p/v')"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'debug'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:splitter id="Properties_Splitter_109" no-split-message-error="false">
            <cc:sub-route name="Iterate" routes-to="Call_CreateLogEntry_Debug_Properties_109"/>
            <cc:xml-stream-splitter xpath="/root/p"/>
        </cc:splitter>
        <cc:local-out id="Call_CreateLogEntry_Debug_Map_109" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="parts[0].xpath('/p/k')"/>
            <cc:set name="inLogMessageDetail" value="parts[0].xpath('/p/v')"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'debug'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:splitter id="Map_Splitter_109" no-split-message-error="false">
            <cc:sub-route name="Iterate" routes-to="Call_CreateLogEntry_Debug_Map_109"/>
            <cc:xml-stream-splitter xpath="/root/p"/>
        </cc:splitter>
        <cc:local-out id="Call_CreateLogEntry_Debug_List_109" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="props.inTargetName # ' Element'"/>
            <cc:set name="inLogMessageDetail" value="parts[0].xpath('/root/e')"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'debug'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:splitter id="List_Splitter_109" no-split-message-error="false">
            <cc:sub-route name="Iterate" routes-to="Call_CreateLogEntry_Debug_List_109"/>
            <cc:xml-stream-splitter xpath="/root"/>
        </cc:splitter>
        <cc:local-out id="Call_CreateLogEntry_Debug_Set_109" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="props.inTargetName # ' Element'"/>
            <cc:set name="inLogMessageDetail" value="parts[0].xpath('/root/e')"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'debug'"/>
            
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'props[inTargetType] = ' # props['inTargetType'] # '; props[inTargetName] = ' # props['inTargetName']"/>
        </cc:local-out>
        <cc:splitter id="Set_Splitter_109" no-split-message-error="false">
            <cc:sub-route name="Iterate" routes-to="Call_CreateLogEntry_Debug_Set_109"/>
            <cc:xml-stream-splitter xpath="/root"/>
        </cc:splitter>
        <cc:local-out id="Call_Debug_SoapRequest_103" store-message="none" execute-when="props['inDebugMode']" routes-response-to="CallSoap_Catch_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            
            
            
            
            
            
            
        <cc:set name="inTargetType" value="'message'"/><cc:set name="inEntityName" value="'SOAP-Request__' # props['inWebServiceApplication']"/></cc:local-out>
        <cc:local-out id="Call_Debug_RaaSRequest_102" store-message="none" execute-when="props['inDebugMode']" routes-response-to="CallRaaS_Catch_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'property'"/>
        <cc:set name="inTargetName" value="'localRestUrl'"/></cc:local-out>
        <cc:local-out id="Call_Debug_SoapXslt_103" store-message="none" execute-when="props['inDebugMode']" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'variable'"/>
        <cc:set name="inTargetName" value="'localXsltSoapGenerator'"/><cc:set name="inEntityName" value="(org.apache.commons.lang.StringUtils.contains(props['inPathToXsltFile'], '/')) ?&#xD;&#xA;&#x9;org.apache.commons.lang.StringUtils.substringAfterLast(props['inPathToXsltFile'], '/') :&#xD;&#xA;&#x9;props['inPathToXsltFile']"/></cc:local-out>
        <cc:route id="RouteError_103">
            <cc:mvel-strategy>
                <cc:choose-route expression="parts[0].isXml() &amp;&amp; (Integer.valueOf(parts[0].xpath('count(/SOAP-ENV:Envelope/SOAP-ENV:Body/SOAP-ENV:Fault)')) > 0)" route="SoapError"/>
                <cc:choose-route expression="true" route="HttpError"/>
            </cc:mvel-strategy>
            <cc:sub-route name="SoapError" routes-to="Call_CreateLogEntry_SoapError_Warn_103"/>
            <cc:sub-route name="HttpError" routes-to="Call_CreateLogEntry_HttpError_Error_103"/>
        </cc:route>
        <cc:local-in id="IntegrationEventProgress" routes-to="PIM_108">
            <cc:parameter documentation="The overall completion percentage of the studio execution." name="inProgressPercentage" required="true" type="string"/>
            <cc:parameter documentation="The optional message to output on the Integration Event to indicate at what stage of the processing the Studio is." name="inProgressMessage" required="false" type="string"/>
        </cc:local-in>
        <cc:local-out id="PIM_108" execute-when="props['inProgressMessage'] != empty" routes-response-to="PIE_108" endpoint="vm://wcc/PutIntegrationMessage"><cc:set name="is.message.severity" value="'INFO'"/><cc:set name="is.message.summary" value="props['inProgressMessage']"/><cc:set name="is.message.storage.enabled" value="false"/></cc:local-out>
        <cc:local-out id="PIE_108" routes-response-to="Call_CreateLogEntry_Info_108" endpoint="vm://wcc/PutIntegrationEvent"><cc:set name="is.percent.complete" value="props['inProgressPercentage']"/></cc:local-out>
        <cc:local-out id="Call_CompressResult_102" store-message="none" execute-when="props['inCompressSavedResults']" routes-response-to="Call_StoreResult_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CompressResult_102" clone-request="true">
            <cc:set name="inSaveResultsToIntegrationEvent" value="props['inSaveResultsToIntegrationEvent']"/>
            <cc:set name="inReturnResults" value="props['inReturnResults']"/>
        </cc:local-out>
        <cc:async-mediation id="Compression_Handler_102">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_Compression_Error_102" store-message="none" routes-response-to="Compression_Handler_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while compressing the RaaS results.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="Compression_102" routes-to="CompressionAggregator_102" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; (props['inReturnResults'] == 'variable')">
            <cc:steps>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Compression_Error_102"/>
        </cc:async-mediation>
        <cc:local-in id="CompressResult_102" routes-to="Compression_102">
            <cc:parameter name="inSaveResultsToIntegrationEvent" required="true" type="boolean"/>
            <cc:parameter name="inReturnResults" required="true" type="string"/>
        </cc:local-in>
        <cc:aggregator id="CompressionAggregator_102" collate-when="true" force-batch-when="true">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:zip-file-collater output="variable" output-mimetype="application/zip" output-variable="globalRaaSResultsCompressed"/>
        </cc:aggregator>
        <cc:async-mediation id="StoreCompressed_Handler_102">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_StoreCompressed_Error_102" store-message="none" routes-response-to="StoreCompressed_Handler_102" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while storing the compressed RaaS results to a file attached to the Integration Event.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="StoreCompressed_102" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; props['inCompressSavedResults']">
            <cc:steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localFilename'] = org.apache.commons.lang3.StringUtils.deleteWhitespace(props['inReportServiceAlias'] #'.zip');</cc:expression>
                </cc:eval>
                <cc:store id="StoreContent" output="variable" output-mimetype="text/xml" output-variable="localUnwantedOutput" input="variable" input-variable="globalRaaSResultsCompressed" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['localFilename']}"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_StoreCompressed_Error_102"/>
        </cc:async-mediation>
        <cc:local-out id="Call_IEP_10" store-message="none" routes-response-to="MainFlowControl" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false"><cc:set name="inProgressPercentage" value="'10'"/><cc:set name="inProgressMessage" value="'Initialization Complete.  Cloud Log, integration attributes, and launch parameters have been loaded.  Beginning data retrieval with Courses...'"/></cc:local-out>
        <cc:local-out id="Call_IEP_90" store-message="none" routes-response-to="Call_StoreLog" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false">
            <cc:set name="inProgressPercentage" value="'90'"/>
            <cc:set name="inProgressMessage" value="'Integration functional behavior complete.  Finalizing logs...'"/>
        </cc:local-out>
        <cc:local-out id="Call_IEP_99" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false">
            <cc:set name="inProgressPercentage" value="'99'"/>
            <cc:set name="inProgressMessage" value="'Logs Finalized.  Awaiting any background process to complete Integration Event...'"/>
        </cc:local-out>
        <cc:aggregator id="AggregateToArchive_109" routes-to="StoreArchive_109" collate-when="props['inCollate']" force-batch-on-last-message="false" force-batch-when="props['inBatch']">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:zip-file-collater output-mimetype="application/zip" message-entity-name="@{props['outEntityName']}"/>
        </cc:aggregator>
        <cc:local-in id="Aggregate_109" routes-to="DedupeName_109">
            <cc:parameter default="true" name="inCollate" required="true" type="boolean"/>
            <cc:parameter default="false" name="inBatch" required="true" type="boolean"/><cc:parameter default="(props['inEntityName'] != empty) ? props['inEntityName'] : props['inTargetName']" name="inEntityName" required="props['inCollate']" type="string"/>
        <cc:out-parameter name="outEntityName"/></cc:local-in>
        <cc:async-mediation id="DedupeName_109" routes-to="AggregateToArchive_109">
            <cc:steps>
                <cc:validate-exp id="ValidateParameters">
                    <cc:expression error-number="10900" failure-message="DebugFile Aggregator (Aggregator_109) parameter failure.  The inCollate and inBatch arguments cannot both be false.">(!props['inCollate'] &amp;&amp; props['inBatch']) ||&#xD;
	(props['inCollate'] &amp;&amp; !props['inBatch']) ||&#xD;
	(props['inCollate'] &amp;&amp; props['inBatch'])</cc:expression>
                </cc:validate-exp>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outEntityName'] = (props['inEntityName'] != empty) ? props['globalStringDeduplicator'].dedupeString(props['inEntityName']) : '';</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Aggregate_Finalize_109" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Aggregate_109"><cc:set name="inCollate" value="false"/><cc:set name="inBatch" value="true"/></cc:local-out>
        <cc:local-out id="Call_Aggregate_Message_109" store-message="none" routes-response-to="Call_CreateLogEntry_Debug_Message_109" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Aggregate_109">
            <cc:set name="inCollate" value="true"/>
            <cc:set name="inBatch" value="false"/>
        <cc:set name="inEntityName" value="(props['inEntityName'] != empty) ? props['inEntityName'] : props['inTargetName']"/></cc:local-out>
        <cc:async-mediation id="Message_Name_109">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outEntityName'] = props['outEntityName'];</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Variable_PrepareValue_109" routes-to="Call_Aggregate_Variable_109">
            <cc:steps>
                <cc:eval id="CopyVarToMsg">
                    <cc:expression>parts[0] = vars[props.inTargetName];</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Aggregate_Variable_109" store-message="none" routes-response-to="Call_CreateLogEntry_Debug_Variable_109" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Aggregate_109">
            <cc:set name="inCollate" value="true"/>
            <cc:set name="inBatch" value="false"/>
            <cc:set name="inEntityName" value="(props['inEntityName'] != empty) ? props['inEntityName'] : props['inTargetName']"/>
        </cc:local-out>
        <cc:async-mediation id="Variable_Name_109">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['outEntityName'] = props['outEntityName'];</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Validation_AbortOnError_103" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Transform_AbortOnError_103" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Results_AbortOnError_103" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="InitializeAndFinalize_AbortOnError_102" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="CallRaaS_AbortOnError_102" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Results_AbortOnError_102" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Validation_103" routes-to="PrepareMapInput_103">
            <cc:steps>
                <cc:eval id="EvaluateParameters">
                    <cc:expression>props['localIsValuedProperty'] = props['inMapPropertyName'] != empty;&#xD;
propname = props['inMapPropertyName'];&#xD;
props['localIsDefinedProperty'] = props['localIsValuedProperty'] &amp;&amp; context.containsProperty(propname);&#xD;
props['localIsCorrectTypeProperty'] = props['localIsDefinedProperty'] &amp;&amp; (context.getProperty(propname) instanceof java.util.Map);&#xD;
props['localIsNonEmptyMapProperty'] = props['localIsCorrectTypeProperty'] &amp;&amp; !(((java.util.Map)(context.getProperty(propname))).isEmpty());</cc:expression>
                    <cc:expression>props['localIsValuedVariable'] = props['inMapVariableName'] != empty;&#xD;
varname = props['inMapVariableName'];&#xD;
props['localIsDefinedVariable'] = props['localIsValuedVariable'] &amp;&amp; vars.isVariable(varname);&#xD;
props['localIsCorrectTypeVariable'] = props['localIsDefinedVariable'] &amp;&amp; (vars[varname].isXml());&#xD;
props['localIsNonEmptyMapVariable'] = props['localIsCorrectTypeVariable'] &amp;&amp; (vars[varname] != null);</cc:expression>
                </cc:eval>
                <cc:validate-exp id="ValidateParameters">
                    <cc:expression error-number="10300" failure-message="Only one (or neither) of the inMapPropertyName and inMapVariableName input parameters should be set.  However, both were provided.">!(props['localIsValuedProperty'] &amp;&amp; props['localIsValuedVariable'])</cc:expression>
                    <cc:expression error-number="10301" failure-message="The inMapPropertyName input parameter was set.  However, a context property with the referenced name [@{props['inMapPropertyName']}] could not be found.">!props['localIsValuedProperty'] || (props['localIsValuedProperty'] &amp;&amp; props['localIsDefinedProperty'])</cc:expression>
                    <cc:expression error-number="10302" failure-message="The inMapPropertyName input parameter was set.  However, the referenced context property [@{props['inMapPropertyName']}] was not an instance of java.util.Map.">!props['localIsValuedProperty'] || (props['localIsValuedProperty'] &amp;&amp; props['localIsCorrectTypeProperty'])</cc:expression>
                    <cc:expression error-number="10303" failure-message="The inMapPropertyName input parameter was set.  However, the referenced context property [@{props['inMapPropertyName']}] contained no data.">!props['localIsValuedProperty'] || (props['localIsValuedProperty'] &amp;&amp; props['localIsNonEmptyMapProperty'])</cc:expression>
                    <cc:expression error-number="10304" failure-message="The inMapVariableName input parameter was set.  However, a context variable with the referenced name [@{props['inMapVariableName']}] could not be found.">!props['localIsValuedVariable'] || (props['localIsValuedVariable'] &amp;&amp; props['localIsDefinedVariable'])</cc:expression>
                    <cc:expression error-number="10305" failure-message="The inMapVariableName input parameter was set.  However, the referenced context variable [@{props['inMapVariableName']}] was not XML.">!props['localIsValuedVariable'] || (props['localIsValuedVariable'] &amp;&amp; props['localIsCorrectTypeVariable'])</cc:expression>
                    <cc:expression error-number="10306" failure-message="The inMapVariableName input parameter was set.  However, the referenced context variable [@{props['inMapVariableName']}] was null.">!props['localIsValuedVariable'] || (props['localIsValuedVariable'] &amp;&amp; props['localIsNonEmptyMapVariable'])</cc:expression>
                </cc:validate-exp></cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Validation_Error_103"/>
        </cc:async-mediation>
        <cc:async-mediation id="SetHeaders_103" routes-to="Call_Debug_SoapRequest_103">
            <cc:steps>
                <cc:set-headers id="SetHeaders">
                    <cc:remove-headers/>
                    <cc:add-headers>
                        <cc:add-header name="x-validate-only" value="@{props['inValidateOnly'] == true ? 1 : 0}"/>
                    </cc:add-headers>
                </cc:set-headers></cc:steps>
        </cc:async-mediation>
        <cc:local-in id="BuildRequest_103" routes-to="Validation_103"><cc:parameter default="props['inApiVersion']" documentation="The version of the web service to be called, e.g. &quot;v30.0&quot;" name="inApiVersion" required="true" type="string"/><cc:parameter default="props['inPathToXsltFile']" documentation="The file path relative to /ws/WSAR-INF for the XSLT file that will generate the SOAP request, e.g. &quot;xslt/GetWorkersRequest.xslt&quot;." name="inPathToXsltFile" required="true" type="string"/><cc:parameter documentation="The java.util.Map instance that holds the key/value pairs of values to be used in the transform provided on the inPathToXsltFile parameter.  This is mutually-exclusive with inMapVariableName.  The transform will define pre-established keys for the parameterized portions of the soap request.  Those pre-established keys should be used as the keys in the map so that their corresponding values can be embedded into the soap request." name="inMapPropertyName" required="false" type="string"/><cc:parameter documentation="The name of the context variable that holds the data values to be used in the transform provided on the inPathToXsltFile parameter.  This is mutually-exclusive with inMapPropertyName.  The XML stored in the variable must be compatible with the XSLT provided on inPathToXsltFile.  See aUnit tests for a generic example of a multi-iteration, multi-variable example." name="inMapVariableName" required="false" type="string"/><cc:parameter default="props['inIsAbortOnError']" name="inIsAbortOnError" required="true" type="boolean"/></cc:local-in>
        <cc:local-out id="Call_BuildRequest_103" store-message="none" execute-when="!props['inUseMessageRootPartAsRequest']" routes-response-to="SetHeaders_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/BuildRequest_103" propagate-abort="true"><cc:set name="inApiVersion" value="props['inApiVersion']"/><cc:set name="inPathToXsltFile" value="props['inPathToXsltFile']"/><cc:set name="inMapPropertyName" value="props['inMapPropertyName']"/><cc:set name="inMapVariableName" value="props['inMapVariableName']"/><cc:set name="inIsAbortOnError" value="props['inIsAbortOnError']"/></cc:local-out>
        <cc:async-mediation id="StoreArchive_109" execute-steps-when="props['inBatch']">
            <cc:steps>
                <cc:store id="StoreArchive" output="variable" output-variable="localDebugArchive" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['globalDebugArchiveFilename']}"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Debug_Finalize" store-message="none" routes-response-to="Call_IEP_99" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'finalize'"/>
            
            
        </cc:local-out>
        <cc:local-out id="Call_Debug_Transform_SoapXslt_103" store-message="none" routes-response-to="Call_Finally_Transform_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'variable'"/>
            <cc:set name="inTargetName" value="'localXsltSoapGenerator'"/>
            <cc:set name="inEntityName" value="(org.apache.commons.lang.StringUtils.contains(props['inPathToXsltFile'], '/')) ?&#xD;&#xA;&#x9;org.apache.commons.lang.StringUtils.substringAfterLast(props['inPathToXsltFile'], '/') :&#xD;&#xA;&#x9;props['inPathToXsltFile']"/>
        </cc:local-out>
        <cc:local-out id="Call_Debug_Results_SoapXslt_103" store-message="none" execute-when="!props['inDebugMode']" routes-response-to="Call_Finally_Results_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'variable'"/>
            <cc:set name="inTargetName" value="'localXsltSoapGenerator'"/>
            <cc:set name="inEntityName" value="(org.apache.commons.lang.StringUtils.contains(props['inPathToXsltFile'], '/')) ?&#xD;&#xA;&#x9;org.apache.commons.lang.StringUtils.substringAfterLast(props['inPathToXsltFile'], '/') :&#xD;&#xA;&#x9;props['inPathToXsltFile']"/>
        </cc:local-out>
        <cc:local-out id="Call_Debug_SoapError_SoapXslt_103" store-message="none" execute-when="!props['inDebugMode']" routes-response-to="Call_Finally_SoapError_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'variable'"/>
            <cc:set name="inTargetName" value="'localXsltSoapGenerator'"/>
            <cc:set name="inEntityName" value="(org.apache.commons.lang.StringUtils.contains(props['inPathToXsltFile'], '/')) ?&#xD;&#xA;&#x9;org.apache.commons.lang.StringUtils.substringAfterLast(props['inPathToXsltFile'], '/') :&#xD;&#xA;&#x9;props['inPathToXsltFile']"/>
        </cc:local-out>
        <cc:local-out id="Call_Debug_HttpError_SoapXslt_103" store-message="none" execute-when="!props['inDebugMode']" routes-response-to="Call_Finally_HttpError_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'variable'"/>
            <cc:set name="inTargetName" value="'localXsltSoapGenerator'"/>
            <cc:set name="inEntityName" value="(org.apache.commons.lang.StringUtils.contains(props['inPathToXsltFile'], '/')) ?&#xD;&#xA;&#x9;org.apache.commons.lang.StringUtils.substringAfterLast(props['inPathToXsltFile'], '/') :&#xD;&#xA;&#x9;props['inPathToXsltFile']"/>
        </cc:local-out>
        <cc:async-mediation id="RouteError_Soap_AbortOnError_103" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(false);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="RouteError_Http_AbortOnError_103" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_Info_108" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Integration '# String.valueOf(props['inProgressPercentage']) #'% Complete'"/>
            <cc:set name="inLogMessageDetail" value="props['inProgressMessage']"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'info'"/>
            
            
            
        </cc:local-out>
        <cc:local-out id="Call_Debug_Finalize_GEH" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'finalize'"/>
        </cc:local-out>
        <cc:local-out id="Call_Debug_SoapResponse_103" store-message="none" execute-when="props['inDebugMode']" routes-response-to="Results_103" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'message'"/>
            <cc:set name="inEntityName" value="'SOAP-Response__' # props['inWebServiceApplication']"/>
        </cc:local-out>
        <cc:sync-mediation id="Properties_InitializeAndFinalize_109" routes-to="Properties_PrepareValue_109" execute-steps-when="!message.isNullContentRootPart()">
            <cc:request-steps>
                <cc:copy id="SaveMsg" output="variable" output-variable="debugTemporaryStorage"/>
            </cc:request-steps>
            <cc:response-steps>
                <cc:eval id="CleanUp">
                    <cc:expression>vars['debugTemporaryStorage'] = null;</cc:expression>
                </cc:eval>
                <cc:copy id="RestoreMsg" output="message" input="variable" input-variable="debugTemporaryStorage"/>
            </cc:response-steps>
        </cc:sync-mediation>
        <cc:sync-mediation id="Map_InitializeAndFinalize_109" routes-to="Map_PrepareValue_109" execute-steps-when="!message.isNullContentRootPart()">
            <cc:request-steps>
                <cc:copy id="SaveMsg" output="variable" output-variable="debugTemporaryStorage"/>
            </cc:request-steps>
            <cc:response-steps>
                <cc:eval id="CleanUp">
                    <cc:expression>vars['debugTemporaryStorage'] = null;</cc:expression>
                </cc:eval>
                <cc:copy id="RestoreMsg" output="message" input="variable" input-variable="debugTemporaryStorage"/>
            </cc:response-steps>
        </cc:sync-mediation>
        <cc:sync-mediation id="List_InitializeAndFinalize_109" routes-to="List_PrepareValue_109" execute-steps-when="!message.isNullContentRootPart()">
            <cc:request-steps>
                <cc:copy id="SaveMsg" output="variable" output-variable="debugTemporaryStorage"/>
            </cc:request-steps>
            <cc:response-steps>
                <cc:eval id="CleanUp">
                    <cc:expression>vars['debugTemporaryStorage'] = null;</cc:expression>
                </cc:eval>
                <cc:copy id="RestoreMsg" output="message" input="variable" input-variable="debugTemporaryStorage"/>
            </cc:response-steps>
        </cc:sync-mediation>
        <cc:sync-mediation id="Set_InitializeAndFinalize_109" routes-to="Set_PrepareValue_109" execute-steps-when="!message.isNullContentRootPart()">
            <cc:request-steps>
                <cc:copy id="SaveMsg" output="variable" output-variable="debugTemporaryStorage"/>
            </cc:request-steps>
            <cc:response-steps>
                <cc:eval id="CleanUp">
                    <cc:expression>vars['debugTemporaryStorage'] = null;</cc:expression>
                </cc:eval>
                <cc:copy id="RestoreMsg" output="message" input="variable" input-variable="debugTemporaryStorage"/>
            </cc:response-steps>
        </cc:sync-mediation>
        <cc:async-mediation id="Initialize_109" routes-to="RouteType_109">
            <cc:steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['outEntityName'] = '';</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Debug_Initialize_Finalize" store-message="none" routes-response-to="Initialize_Handler" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'finalize'"/>
        </cc:local-out>
        <cc:async-mediation id="Teardown_107">
            <cc:steps>
                <cc:eval id="CleanUp">
                    <cc:expression>// And remove local variables that are no longer required&#xD;
foreach (varname : ['localPreTransformData107', 'localPayload107', 'localXslt107']) {&#xD;
	vars[varname] = null;&#xD;
}</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="Finally_107" routes-to="Teardown_107"/>
        <cc:sync-mediation id="Validation_107" routes-to="SavePayloadData_107" routes-response-to="Call_Finally_107">
            <cc:request-steps>
                <cc:validate-exp id="ValidateParameters">
                    <cc:expression error-number="10700" failure-message="Input parameters inPayloadDataLocation and inEnrichmentDataLocation were both set to message.  This implies that the message contains both the data payload as well as the mapping data.  Only one can be on the message.">!(props['inPayloadDataLocation'] == 'message' &amp;&amp; props['inEnrichmentDataLocation'] == 'message')</cc:expression>
                    <cc:expression error-number="10701" failure-message="Input parameter inPayloadDataLocation was not &quot;message&quot; and was not located as a variable.  The value must either be &quot;message&quot; or refer to a valid, bound variable.">props['inPayloadDataLocation'] == 'message' || context.variables.isVariable(props.inPayloadDataLocation);</cc:expression>
                    <cc:expression error-number="10702" failure-message="Input parameter inEnrichmentDataLocation was not &quot;message&quot; and was not located as a variable.  The value must either be &quot;message&quot; or refer to a valid, bound variable.">props['inEnrichmentDataLocation'] == 'message' || context.variables.isVariable(props.inEnrichmentDataLocation);</cc:expression>
                </cc:validate-exp>
            </cc:request-steps>
            <cc:response-steps>
            </cc:response-steps>
        </cc:sync-mediation>
        <cc:local-out id="Call_Finally_107" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_107"/>
        <cc:local-in id="EnrichAndTransformStreamData" routes-to="Validation_107" access="public">
            
            
            
            
            
            
            
            <cc:parameter default="'message'" documentation="Where the main data being enriched and transformed can be found.  If the value is &quot;message&quot;, then the message root will be used as the data source.  Otherwise, the name will be interpreted as a variable name where the data can be found." name="inPayloadDataLocation" required="true" type="string"/><cc:parameter default="'globalRaaSResults'" documentation="Where the enrichment data (that would be used to build a map) can be found.  If the value is &quot;message&quot;, then the message root will be used as the data source.  Otherwise, the name will be interpreted as a variable name where the data can be found.  The default value assumes that sub-assembly 102 may have been used and the results are in &quot;globalRaaSResults&quot;, although this need not be the case." name="inEnrichmentDataLocation" required="true" type="string"/><cc:parameter documentation="The file path relative to /ws/WSAR-INF for the XSLT file that will transform the data from inPayloadDataLocation, enriching and decorating it with data from inEnrichmentDataLocation, e.g. &quot;xslt/GetWorkersRequest.xslt&quot;.  Though this is intended to be a streaming implementation, the responsibility for streaming lies with the developer of the XSLT; this sub-assembly is not streaming unless the XSLT correctly implements it." name="inPathToXsltFile" required="true" type="string"/><cc:parameter default="'globalData'" documentation="Where the results of the transformation are returned.  If the value is &quot;message&quot;, then the message root will contain the results when the sub-assembly ends and if the calling local-out is set to Clone Request = false.  Otherwise, the name will be interpreted as a variable name where the data can be found.  " name="inReturnOutputLocation" required="true" type="string"/><cc:parameter default="false" documentation="Controls whether or not the abort flag is set on the context upon an error.  If this is set to true and an error occurs, then...  If the calling local-out is set to Propagate Abort = true on the Advanced tab, then the calling assembly will also abort.  If the calling local-out is set to Propagate Abort = false, then the calling assembly will not be aborted.  However, further calls into this sub-assembly will result in a &quot;Loop-detected in local-in&quot; exception being thrown to the top level error handler." name="inIsAbortOnError" required="false" type="boolean"/>
            
        </cc:local-in>
        <cc:local-in id="Aggregate_107" routes-to="AggregateData_107"><cc:parameter default="true" name="inCollate" required="true" type="boolean"/><cc:parameter default="false" name="inBatch" required="true" type="boolean"/></cc:local-in>
        <cc:aggregator id="AggregateData_107" collate-when="props['inCollate']" force-batch-on-last-message="false" force-batch-when="props['inBatch']">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:xml-message-content-collater output="variable" output-mimetype="text/xml" output-variable="localPreTransformData107">
        <cc:header-text>&lt;Results></cc:header-text>
        <cc:footer-text>&lt;/Results></cc:footer-text>
      </cc:xml-message-content-collater>
        </cc:aggregator>
        <cc:async-mediation id="SavePayloadData_107" routes-to="PrepareEnrichmentData_107" execute-steps-when="props['inPayloadDataLocation'] == 'message'" handle-downstream-errors="true">
            <cc:steps>
                <cc:copy id="CopyMsgToVar" output="variable" output-mimetype="text/xml" output-variable="localPayload107"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_SavePayloadData_Error_107"/>
        </cc:async-mediation>
        <cc:async-mediation id="PrepareEnrichmentData_107" routes-to="Call_Aggregate_EnrichmentData_107" execute-steps-when="props['inEnrichmentDataLocation'] != 'message'">
            <cc:steps>
                <cc:eval id="MoveVarToMsg">
                    <cc:expression>parts[0] = vars.getVariable(props.inEnrichmentDataLocation);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Aggregate_EnrichmentData_107" store-message="none" routes-response-to="RestorePayloadData_107" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Aggregate_107"><cc:set name="inCollate" value="true"/><cc:set name="inBatch" value="false"/></cc:local-out>
        <cc:async-mediation id="PreparePayloadData_107" routes-to="Call_Aggregate_PayloadData_107" execute-steps-when="props['inPayloadDataLocation'] != 'message'">
            <cc:steps>
                <cc:eval id="MoveVarToMsg">
                    <cc:expression>parts[0] = vars.getVariable(props.inPayloadDataLocation);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Aggregate_PayloadData_107" store-message="none" routes-response-to="Transform_107" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Aggregate_107">
            <cc:set name="inCollate" value="true"/>
            <cc:set name="inBatch" value="true"/>
        </cc:local-out>
        <cc:async-mediation id="Transform_107" routes-to="FinalizeResults">
            <cc:steps>
                <cc:write id="WriteXSLT" output="variable" output-variable="localXslt107">
                    <cc:message>
                        <cc:static-file input-file="@{props['inPathToXsltFile']}"/>
                    </cc:message>
                </cc:write>
                <cc:xslt-plus id="ExecuteTranform" input="variable" input-variable="localPreTransformData107" url="mctx:vars/localXslt107"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Transform_Error_107"/>
        </cc:async-mediation>
        <cc:async-mediation id="FinalizeResults" execute-steps-when="props['inReturnOutputLocation'] != 'message'">
            <cc:steps>
                <cc:eval id="MoveMsgToVar">
                    <cc:expression>vars[props.inReturnOutputLocation] = parts[0];</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="SavePayloadData_AbortOnError_107" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="SavePayloadData_Handler_107" routes-to="SavePayloadData_AbortOnError_107">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_SavePayloadData_107" store-message="none" routes-response-to="SavePayloadData_Handler_107" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_107"/>
        <cc:local-out id="Call_CreateLogEntry_SavePayloadData_Error_107" store-message="none" routes-response-to="Call_Finally_SavePayloadData_107" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'XSLT Preparation Error'"/>
            <cc:set name="inLogMessageDetail" value="'An error occurred managing the payload and enrichment data between the message root and variables.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
        <cc:set name="inExtraErrorCode" value="context.errorCode"/></cc:local-out>
        <cc:async-mediation id="Transform_AbortOnError_107" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Transform_Handler_107" routes-to="Transform_AbortOnError_107">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_Transform_107" store-message="none" routes-response-to="Transform_Handler_107" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_107"/>
        <cc:local-out id="Call_CreateLogEntry_Transform_Error_107" store-message="none" routes-response-to="Call_Finally_Transform_107" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'XSLT Transform Error'"/>
            <cc:set name="inLogMessageDetail" value="'An error occurred executing the payload transformation using enrichment data.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:sync-mediation id="MainFlowControl" routes-to="Call_Main" routes-response-to="Call_IEP_90">
            <cc:request-steps/>
            <cc:response-steps>
                <cc:eval id="ResetAbort">
                    <cc:expression>context.setAbort(false);</cc:expression>
                </cc:eval></cc:response-steps>
        </cc:sync-mediation>
        <cc:async-mediation id="Properties_PrepareValue_109" routes-to="Properties_Splitter_109">
            <cc:steps>
                <cc:write id="PropsToXML" output-mimetype="text/xml">
                    <cc:message>
                        <cc:text>&lt;root>&#xD;
@foreach{props[props.inTargetName] as propname}&#xD;
	&lt;p>&#xD;
		&lt;k>@{propname}&lt;/k>&#xD;
		&lt;v>@{props[propname]}&lt;/v>&#xD;
	&lt;/p>&#xD;
@end{}&#xD;
&lt;/root></cc:text>
                    </cc:message>
                </cc:write></cc:steps>
        </cc:async-mediation>
        <cc:sync-mediation id="Variable_InitializeAndFinalize_109" routes-to="Variable_PrepareValue_109" execute-steps-when="!message.isNullContentRootPart()">
            <cc:request-steps>
                <cc:copy id="SaveMsg" output="variable" output-variable="debugTemporaryStorage"/></cc:request-steps>
            <cc:response-steps>
            
                <cc:eval id="CleanUp">
                    <cc:expression>vars['debugTemporaryStorage'] = null;</cc:expression>
                </cc:eval>
                <cc:copy id="RestoreMsg" output="message" input="variable" input-variable="debugTemporaryStorage"/>
            </cc:response-steps>
        </cc:sync-mediation>
        <cc:async-mediation id="Map_PrepareValue_109" routes-to="Map_Splitter_109">
            <cc:steps>
                <cc:write id="MapToXML" output-mimetype="text/xml">
                    <cc:message>
                        <cc:text>&lt;root>&#xD;
@foreach{props[props.inTargetName].keySet() as key}&#xD;
	&lt;p>&#xD;
		&lt;k>@{key}&lt;/k>&#xD;
		&lt;v>@{props[props.inTargetName].get(key)}&lt;/v>&#xD;
	&lt;/p>&#xD;
@end{}&#xD;
&lt;/root></cc:text>
                    </cc:message>
                </cc:write></cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="List_PrepareValue_109" routes-to="List_Splitter_109">
            <cc:steps>
                <cc:write id="ListToXML" output-mimetype="text/xml">
                    <cc:message>
                        <cc:text>&lt;root>&#xD;
@foreach{props[props.inTargetName] as e}&#xD;
	&lt;e>@{e}&lt;/e>&#xD;
@end{}&#xD;
&lt;/root></cc:text>
                    </cc:message>
                </cc:write></cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Set_PrepareValue_109" routes-to="Set_Splitter_109">
            <cc:steps>
                <cc:write id="SetToXML" output-mimetype="text/xml">
                    <cc:message>
                        <cc:text>&lt;root>&#xD;
@foreach{props[props.inTargetName] as e}&#xD;
	&lt;e>@{e}&lt;/e>&#xD;
@end{}&#xD;
&lt;/root></cc:text>
                    </cc:message>
                </cc:write></cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="RestorePayloadData_107" routes-to="PreparePayloadData_107" execute-steps-when="props['inPayloadDataLocation'] == 'message'">
            <cc:steps>
                <cc:copy id="CopyVarToMsg" output="message" output-mimetype="text/xml" input="variable" input-variable="localPayload107"/></cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CallRaaS_Campaigns" store-message="none" routes-response-to="ValidateCampaignResults" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CallRaaS"><cc:set name="inReportServiceAlias" value="'Campaign Data'"/><cc:set name="inSaveResultsToIntegrationEvent" value="true"/><cc:set name="inCompressSavedResults" value="true"/><cc:set name="inPropertyNameReportPromptMap"/><cc:set name="inReturnResults" value="'variable'"/><cc:set name="inDebugMode" value="props['globalIsDebugMode']"/><cc:set name="inIsAbortOnError" value="true"/></cc:local-out>
        <cc:async-mediation id="ProcessCampaignData" routes-to="Call_IEP_30">
            <cc:steps>
                <cc:copy id="CopyVarToVar" output="variable" output-mimetype="text/xml" output-variable="globalCampaignData" input="variable" input-variable="globalRaaSResults"/>
                <cc:eval id="InitValues">
                    <cc:expression>props['localHasWorkers'] = props['globalWorker'] != empty</cc:expression>
                    <cc:expression>props['localWorkerParameters'] = '';</cc:expression>
                    <cc:expression>if (props['localHasWorkers']) {&#xD;
	foreach (employeeId : props['globalWorker']) {&#xD;
		props['localWorkerParameters'] = props['localWorkerParameters'] # '&lt;wd:Workers>&lt;wd:ID wd:type=&quot;Employee_ID&quot;>' # employeeId # '&lt;/wd:ID>&lt;/wd:Workers>';&#xD;
	}&#xD;
}</cc:expression>
                </cc:eval>
                <cc:eval id="UpdateDebug">
                    <cc:expression>props['globalDebugPropertyList'].add('localHasWorkers');&#xD;
props['globalDebugPropertyList'].add('localWorkerParameters');</cc:expression>
                </cc:eval>
                <cc:xslt-plus id="ExtractList" output-mimetype="text/xml" input="variable" input-variable="globalCampaignData" url="xslt/Extract_Campaigns.xsl"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CallRaaSSoap_Enrollment" store-message="none" routes-response-to="Call_IEP_40" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CallRaaSSoap">
            <cc:set name="inReportServiceAlias" value="'Enrollment Data'"/>
            <cc:set name="inSaveResultsToIntegrationEvent" value="true"/>
            <cc:set name="inCompressSavedResults" value="true"/>
            
            <cc:set name="inReturnResults" value="'variable'"/>
            <cc:set name="inDebugMode" value="props['globalIsDebugMode']"/>
            <cc:set name="inIsAbortOnError" value="true"/>
        </cc:local-out>
        <cc:local-out id="Call_CallRaaS_Courses" store-message="none" routes-response-to="ProcessCourseData" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CallRaaS">
            <cc:set name="inReportServiceAlias" value="'Course Data'"/>
            <cc:set name="inSaveResultsToIntegrationEvent" value="true"/>
            <cc:set name="inCompressSavedResults" value="true"/>
            <cc:set name="inPropertyNameReportPromptMap"/>
            <cc:set name="inReturnResults" value="'variable'"/>
            <cc:set name="inDebugMode" value="props['globalIsDebugMode']"/>
            <cc:set name="inIsAbortOnError" value="true"/>
        </cc:local-out>
        <cc:async-mediation id="ProcessCourseData" routes-to="Call_IEP_20">
            <cc:steps>
                <cc:copy id="CopyVarToVar" output="variable" output-mimetype="text/xml" output-variable="globalCourseData" input="variable" input-variable="globalRaaSResults"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_EnrichAndTransformStreamData" store-message="none" routes-response-to="Call_IEP_50" endpoint="vm://INT133_Learning_Enrollment_Boomerang/EnrichAndTransformStreamData"><cc:set name="inPayloadDataLocation" value="'globalRaaSResults'"/><cc:set name="inEnrichmentDataLocation" value="'globalCourseData'"/><cc:set name="inPathToXsltFile" value="'xslt/FilterAndTransformInStream.xsl'"/><cc:set name="inReturnOutputLocation" value="'globalData'"/><cc:set name="inIsAbortOnError" value="false"/></cc:local-out>
        <cc:local-out id="Call_IEP_20" store-message="none" routes-response-to="Call_CallRaaS_Campaigns" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false">
            <cc:set name="inProgressPercentage" value="'20'"/>
            <cc:set name="inProgressMessage" value="'Completed loading of Learning Courses.  Beginning load of Campaigns...'"/>
        </cc:local-out>
        <cc:local-out id="Call_IEP_30" store-message="none" routes-response-to="Call_CallRaaSSoap_Enrollment" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false">
            <cc:set name="inProgressPercentage" value="'30'"/>
            <cc:set name="inProgressMessage" value="'Completed loading of Campaigns.  Beginning load of Enrollment Data...'"/>
        </cc:local-out>
        <cc:local-out id="Call_IEP_40" store-message="none" routes-response-to="Call_EnrichAndTransformStreamData" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false">
            <cc:set name="inProgressPercentage" value="'40'"/>
            <cc:set name="inProgressMessage" value="'Completed loading of Enrollment Data.  Beginning transformation of Enrollment Data filtered by Learning Courses...'"/>
        </cc:local-out>
        <cc:local-out id="Call_IEP_50" store-message="none" routes-response-to="Call_Debug_Properties_AfterRaaS" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false">
            <cc:set name="inProgressPercentage" value="'50'"/>
            <cc:set name="inProgressMessage" value="'Completed transformation of Enrollment Data filtered by Learning Courses.  Beginning enrollment uploads to the ' # props['cc.customer.id'] # ' tenant...'"/>
        </cc:local-out>
        <cc:splitter id="SplitRequests" no-split-message-error="false">
            <cc:sub-route name="ProcessRequest" routes-to="InitializeIteration"/>
            <cc:xml-stream-splitter xpath="/wd:Report_Data/*"/>
        </cc:splitter>
        <cc:async-mediation id="PrepareSoapRequest_Enroll" routes-to="Call_Debug_Message_SoapRequest_Enroll">
            <cc:steps>
                <cc:wrap-soap id="WrapSoap" output-mimetype="text/xml"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CallSoap_Enrollment" store-message="none" routes-response-to="Call_Debug_Variable_GlobalSoapResults_Enroll" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CallSoap"><cc:set name="inApiVersion" value="props['globalApiVersion']"/><cc:set name="inWebServiceApplication" value="'Learning'"/><cc:set name="inUseMessageRootPartAsRequest" value="true"/><cc:set name="inValidateOnly" value="props['globalIsValidationMode']"/><cc:set name="inDebugMode" value="props['globalIsDebugMode']"/><cc:set name="inIsAbortOnError" value="false"/></cc:local-out>
        <cc:local-out id="Call_IEP_Percent" store-message="none" execute-when="props['globalPercentCounter'] >= props['globalNextUpdateThreshold']" routes-response-to="UpdatePercentCounters" endpoint="vm://INT133_Learning_Enrollment_Boomerang/IntegrationEventProgress" clone-request="true" propagate-abort="false">
            <cc:set name="inProgressPercentage" value="String.valueOf(props['globalPercentCounter'])"/>
            
        <cc:set name="inProgressMessage" value="'...uploading Learning Course enrollments to the ' # props['cc.customer.id'] # ' tenant... (' # String.valueOf(Integer.valueOf(props['globalPercentCounter'])) # '%)'"/></cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_CallSoapEnrollment_Info" store-message="none" execute-when="props['localEnrollmentReference'] != empty" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry"><cc:set name="inLogMessage" value="'Successfully Enrolled Learner to Course'"/><cc:set name="inLogMessageDetail" value="'Enrollment created for Learner ' # props['localEmployeeID'] # ' in Learning Course with WID = ' # props['localCourseID']"/><cc:set name="inLogReferenceId" value="props['localEnrollmentReference']"/><cc:set name="inLogLevel" value="'info'"/></cc:local-out>
        <cc:async-mediation id="GetEnrollmentReference" routes-to="Call_CreateLogEntry_CallSoapEnrollment_Info" execute-steps-when="vars['globalSoapResults'].isXml()">
            <cc:steps>
                <cc:eval id="SetValues">
                    <cc:expression>props['localEnrollmentReference'] = vars['globalSoapResults'].xpath('/env:Envelope/env:Body/wd:Enroll_In_Learning_Course_Response/wd:Proposed_Enrollment_Reference/wd:ID[@wd:type=&quot;WID&quot;]');</cc:expression>
                    <cc:expression>props['globalSuccessfulEnrollments'] = props['globalSuccessfulEnrollments'] + 1;</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="ResetIteration" routes-to="Call_IEP_Percent">
            <cc:steps>
                <cc:eval id="ResetValues">
                    <cc:expression>props['localEmployeeID'] = '';&#xD;
props['localCourseID'] = '';&#xD;
props['localEventWID'] = '';</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Teardown_101">
            <cc:steps>
                <cc:eval id="CleanUp">
                    <cc:expression>foreach (propname : ['localIsPromptsProvided','localIsPromptsValid','localRestUrl','localQuerystring','localKeyValueMap','localIsPromptsMap','localIsPromptsEmpty','localFilename','localProgressedToAPI','localIsValidUrlLength']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
                    <cc:expression>foreach (varname : ['localUnwantedOutput','globalRaaSResultsCompressed']) {&#xD;
	vars[varname] = null;&#xD;
}</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="Finally_101" routes-to="Teardown_101"/>
        <cc:async-mediation id="StoreCompressed_Handler_101">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_StoreCompressed_Error_101" store-message="none" routes-response-to="StoreCompressed_Handler_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while storing the compressed RaaS results to a file attached to the Integration Event.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="StoreCompressed_101" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; props['inCompressSavedResults']">
            <cc:steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localFilename'] = org.apache.commons.lang3.StringUtils.deleteWhitespace(props['inReportServiceAlias'] #'.zip');</cc:expression>
                </cc:eval>
                <cc:store id="StoreContent" output="variable" output-mimetype="text/xml" output-variable="localUnwantedOutput" input="variable" input-variable="globalRaaSResultsCompressed" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['localFilename']}"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_StoreCompressed_Error_101"/>
        </cc:async-mediation>
        <cc:async-mediation id="StoreMessage_Handler_101">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_StoreMessage_Error_101" store-message="none" routes-response-to="StoreMessage_Handler_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while storing the RaaS results to a file attached to the Integration Event.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="StoreMessage_101" routes-to="StoreCompressed_101" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; (props['inReturnResults'] == 'message') &amp;&amp; !props['inCompressSavedResults']">
            <cc:steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localFilename'] = org.apache.commons.lang3.StringUtils.deleteWhitespace(props['inReportServiceAlias'] #'.xml');</cc:expression>
                </cc:eval>
                <cc:store id="StoreContent" output="variable" output-mimetype="text/xml" output-variable="localUnwantedOutput" input="message" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['localFilename']}"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_StoreMessage_Error_101"/>
        </cc:async-mediation>
        <cc:async-mediation id="StoreVariable_Handler_101">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_StoreVariable_Error_101" store-message="none" routes-response-to="StoreVariable_Handler_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while storing the RaaS results to a file attached to the Integration Event.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="StoreVariable_101" routes-to="StoreMessage_101" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; (props['inReturnResults'] == 'variable') &amp;&amp; !props['inCompressSavedResults']">
            <cc:steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localFilename'] = org.apache.commons.lang3.StringUtils.deleteWhitespace(props['inReportServiceAlias'] #'.xml');</cc:expression>
                </cc:eval>
                <cc:store id="StoreContent" output="message" output-mimetype="text/xml" input="variable" input-variable="globalRaaSResults" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['localFilename']}"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_StoreVariable_Error_101"/>
        </cc:async-mediation>
        <cc:local-in id="StoreResult_101" routes-to="StoreVariable_101">
            <cc:parameter name="inSaveResultsToIntegrationEvent" required="true" type="boolean"/>
            <cc:parameter name="inReturnResults" required="true" type="string"/>
        </cc:local-in>
        <cc:aggregator id="CompressionAggregator_101" collate-when="true" force-batch-when="true">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:zip-file-collater output="variable" output-mimetype="application/zip" output-variable="globalRaaSResultsCompressed"/>
        </cc:aggregator>
        <cc:async-mediation id="Compression_Handler_101">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_Compression_Error_101" store-message="none" routes-response-to="Compression_Handler_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while compressing the RaaS results.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="Compression_101" routes-to="CompressionAggregator_101" continue-after-error="recover" execute-steps-when="props['inSaveResultsToIntegrationEvent'] &amp;&amp; (props['inReturnResults'] == 'variable')">
            <cc:steps>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Compression_Error_101"/>
        </cc:async-mediation>
        <cc:local-in id="CompressResult_101" routes-to="Compression_101">
            <cc:parameter name="inSaveResultsToIntegrationEvent" required="true" type="boolean"/>
            <cc:parameter name="inReturnResults" required="true" type="string"/>
        </cc:local-in>
        <cc:local-out id="Call_StoreResult_101" store-message="none" execute-when="props['inSaveResultsToIntegrationEvent']" endpoint="vm://INT133_Learning_Enrollment_Boomerang/StoreResult_101" clone-request="true">
            <cc:set name="inSaveResultsToIntegrationEvent" value="props['inSaveResultsToIntegrationEvent']"/>
            <cc:set name="inReturnResults" value="props['inReturnResults']"/>
        </cc:local-out>
        <cc:local-out id="Call_CompressResult_101" store-message="none" execute-when="props['inCompressSavedResults']" routes-response-to="Call_StoreResult_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CompressResult_101" clone-request="true">
            <cc:set name="inSaveResultsToIntegrationEvent" value="props['inSaveResultsToIntegrationEvent']"/>
            <cc:set name="inReturnResults" value="props['inReturnResults']"/>
        </cc:local-out>
        <cc:async-mediation id="Results_AbortOnError_101" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Results_Handler_101" routes-to="Results_AbortOnError_101">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_Results_101" store-message="none" routes-response-to="Results_Handler_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_101"/>
        <cc:local-out id="Call_CreateLogEntry_Results_Error_101" store-message="none" routes-response-to="Call_Finally_Results_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while copying the RaaS results from the message rootpart to variable globalRaaSResults.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="Results_101" routes-to="Call_CompressResult_101" execute-steps-when="props['inReturnResults'] == 'variable'">
            <cc:steps>
                <cc:xslt-plus id="UnwrapSoap" output-mimetype="text/xml" url="xslt/SA101_UnwrapSoapTransform.xsl"/>
                <cc:copy id="CopyMsgToVar" output="variable" output-mimetype="text/xml" output-variable="globalRaaSResults"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_Results_Error_101"/>
        </cc:async-mediation>
        <cc:async-mediation id="HttpOut_AbortOnError_101" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="HttpOut_Handler_101" routes-to="HttpOut_AbortOnError_101">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_HttpOut_101" store-message="none" routes-response-to="HttpOut_Handler_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_101"/>
        <cc:local-out id="Call_CreateLogEntry_HttpOut_Error_101" store-message="none" routes-response-to="Call_Finally_HttpOut_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while executing reports-as-a-service for the '# props['inReportServiceAlias'] #' report alias.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="HttpOut_Catch_101" routes-to="HttpOut_101" continue-after-error="rewind" handle-downstream-errors="true">
            <cc:steps/>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_HttpOut_Error_101"/>
        </cc:async-mediation>
        <cc:local-out id="Call_Debug_RaaSRequest_101" store-message="none" execute-when="props['inDebugMode']" routes-response-to="HttpOut_Catch_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'property'"/>
            <cc:set name="inTargetName" value="'localRestUrl'"/>
        </cc:local-out>
        <cc:async-mediation id="InitializeAndFinalize_AbortOnError_101" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="InitializeAndFinalize_Handler_101" routes-to="InitializeAndFinalize_AbortOnError_101">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_InitializeAndFinalize_101" store-message="none" routes-response-to="InitializeAndFinalize_Handler_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_101"/>
        <cc:local-out id="Call_CreateLogEntry_InitializeAndFinalize_Error_101" store-message="none" routes-response-to="Call_Finally_InitializeAndFinalize_101" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while preparing a reports-as-a-service call.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:sync-mediation id="InitializeAndFinalize_101" routes-to="Call_Debug_RaaSRequest_101" continue-after-error="rewind" handle-downstream-errors="true" routes-response-to="Call_Finally_101">
            <cc:request-steps>
                <cc:write id="WriteSoapRequest">
                    <cc:message>
                        <cc:text>&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wd=&quot;urn:com.workday/bsvc&quot; xmlns:wsse=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;>
            &lt;soapenv:Header>
                &lt;wsse:Security soapenv:mustUnderstand=&quot;1&quot;>
                    &lt;wsse:UsernameToken>
                        &lt;wsse:Username>@{props['wss.usernametoken.username']}&lt;/wsse:Username>
                        &lt;wsse:Password Type=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText&quot;>@{props['wss.usernametoken.password']}&lt;/wsse:Password>
                    &lt;/wsse:UsernameToken>
                &lt;/wsse:Security>
            &lt;/soapenv:Header>
            &lt;soapenv:Body>
                &lt;wd:Execute_Report>
</cc:text>
                        <cc:message-content/>
                        <cc:text>                &lt;/wd:Execute_Report>&#xD;
            &lt;/soapenv:Body>&#xD;
        &lt;/soapenv:Envelope></cc:text>
                    </cc:message>
                </cc:write>
            </cc:request-steps>
            <cc:response-steps/>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_InitializeAndFinalize_Error_101"/>
        </cc:sync-mediation>
        <cc:local-out id="Call_Finally_101" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_101"/>
        <cc:local-in id="CallRaaSSoap" routes-to="InitializeAndFinalize_101" access="public">
            <cc:parameter documentation="The Report Service configuration from which to retrieve results." name="inReportServiceAlias" required="true" type="string"/>
            <cc:parameter default="false" documentation="Controls whether or not the RaaS results are saved to a file that is then attached to the Integration Event for support purposes." name="inSaveResultsToIntegrationEvent" required="true" type="boolean"/>
            
            <cc:parameter default="'variable'" documentation="How the RaaS results are returned to the caller, either on the message if the value is 'message', or in a variable given on the inReturnVariableName input parameter if the value is 'variable', which is the default." name="inReturnResults" required="true" type="string" validation="props['inReturnResults'] == 'variable' || props['inReturnResults'] == 'message'"/>
            <cc:parameter default="props['globalIsDebugMode']" documentation="Controls whether or not the REST request is output on debug." name="inDebugMode" required="true" type="boolean"/>
            <cc:parameter default="true" documentation="If the inSaveResultsToIntegrationEvent parameter is set to save the RaaS results to the Integration Event, then this will control if they are compressed before being saved.  A value of true will compress the results before saving, whereas a value of false will not." name="inCompressSavedResults" required="false" type="boolean"/>
            <cc:parameter default="false" documentation="Controls whether or not the abort flag is set on the context upon an error.  If this is set to true and an error occurs, then...  If the calling local-out is set to Propagate Abort = true on the Advanced tab, then the calling assembly will also abort.  If the calling local-out is set to Propagate Abort = false, then the calling assembly will not be aborted.  However, further calls into this sub-assembly will result in a &quot;Loop-detected in local-in&quot; exception being thrown to the top level error handler." name="inIsAbortOnError" required="false" type="boolean"/>
        </cc:local-in>
        <cc:http-out id="HttpOut_101" routes-response-to="Results_101" endpoint="@{intsys.reportService.getEndpoint(props.inReportServiceAlias)}" http-method="POST"/>
        <cc:async-mediation id="UpdatePercentCounters" execute-steps-when="props['globalPercentCounter'] >= props['globalNextUpdateThreshold']">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['globalUpdateIteration'] = props['globalUpdateIteration'] + 1;</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Debug_Properties_BeforeRaaS" store-message="none" execute-when="props['globalIsDebugMode']" routes-response-to="Call_LoadDataFromReports" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'properties'"/>
            
        <cc:set name="inTargetName" value="'globalDebugPropertyList'"/></cc:local-out>
        <cc:local-out id="Call_Debug_Properties_AfterRaaS" store-message="none" execute-when="props['globalIsDebugMode']" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'properties'"/>
            <cc:set name="inTargetName" value="'globalDebugPropertyList'"/>
        </cc:local-out>
        <cc:local-out id="Call_Debug_Message_SoapRequest_Enroll" store-message="none" execute-when="props['globalIsDebugMode']" routes-response-to="Call_CallSoap_Enrollment" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'message'"/>
            <cc:set name="inEntityName" value="'SOAP-Request__Learning-Enroll_In_Learning_Course'"/>
        </cc:local-out>
        <cc:local-out id="Call_Debug_Variable_GlobalSoapResults_Enroll" store-message="none" execute-when="props['globalIsDebugMode'] &amp;&amp; vars['globalSoapResults'].isXml()" routes-response-to="GetEnrollmentReference" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug">
            <cc:set name="inTargetType" value="'variable'"/>
            <cc:set name="inTargetName" value="'globalSoapResults'"/><cc:set name="inEntityName" value="'SOAP-Response__Learning-Enroll_In_Learning_Course'"/>
        </cc:local-out>
        <cc:async-mediation id="InitializeIteration" routes-to="IterationRoute">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['globalPercentCounter'] = props['globalPercentCounter'] + props['globalPercentIncrement'];</cc:expression>
                    <cc:expression>props['localEnrollmentReference'] = '';&#xD;
vars['globalSoapResults'] = '';</cc:expression>
                    <cc:expression>props['globalNextUpdateThreshold'] = props['globalStartingCompletion'] + (props['globalUpdateEveryPercent'] * props['globalUpdateIteration']);</cc:expression>
                </cc:eval></cc:steps>
        </cc:async-mediation>
        <cc:route id="IterationRoute">
            <cc:mvel-strategy>
                <cc:choose-route expression="props['globalApiCalls'] &lt; props['globalApiLimit'] &amp;&amp; ((boolean) parts[0].xpath('exists(/wd:Enroll_In_Learning_Course_Request)'))" route="CallEnroll"/>
                <cc:choose-route expression="props['globalApiCalls'] &lt; props['globalApiLimit'] &amp;&amp; ((boolean) parts[0].xpath('exists(/wd:Rescind_Business_Process_Request)'))" route="CallRescind"/>
                <cc:choose-route expression="true" route="Defer"/>
            </cc:mvel-strategy>
            <cc:sub-route name="CallEnroll" routes-to="UpdateApiStats_Enroll"/>
            <cc:sub-route name="CallRescind" routes-to="UpdateApiStats_Rescind"/>
            <cc:sub-route name="Defer" routes-to="UpdateDeferredStats"/>
        </cc:route>
        <cc:aggregator id="AggregateDeferredApiCalls" collate-when="true" force-batch-on-last-message="true">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:xml-message-content-collater output="variable" output-mimetype="text/xml" output-variable="globalOutputData">
        <cc:header-text>&lt;wd:Report_Data xmlns:wd=&quot;urn:com.workday/bsvc&quot;></cc:header-text>
        <cc:footer-text>&lt;/wd:Report_Data></cc:footer-text>
      </cc:xml-message-content-collater>
        </cc:aggregator>
        <cc:local-out id="Call_CreateLogEntry_Defer_Info" store-message="none" routes-response-to="AggregateDeferredApiCalls" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Deferred API Call'"/>
            <cc:set name="inLogMessageDetail" value="'Processing exceeded threshold limit for API calls.  Deferring the enrollment for Learner ' # props['localEmployeeID'] # ' in Learning Course with WID = ' # props['localCourseID'] "/>
            <cc:set name="inLogReferenceId" value="props['localEmployeeID']"/>
            <cc:set name="inLogLevel" value="'info'"/>
        </cc:local-out>
        <cc:local-in id="ProcessEnrollments" routes-to="InitializeForUpload"/>
        <cc:async-mediation id="InitializeForUpload" routes-to="SplitRequests">
            <cc:steps>
                <cc:copy id="CopyVarToMsg" output-mimetype="text/xml" input="variable" input-variable="globalData"/>
                <cc:eval id="InitValues">
                    <cc:expression>props['globalStartingCompletion'] = 50;&#xD;
props['globalUpdateEveryPercent'] = 5;</cc:expression>
                    <cc:expression>props['globalTotalItems'] = parts[0].xpath('count(/wd:Report_Data/*)');&#xD;
props['globalPercentCounter'] = props['globalStartingCompletion'];&#xD;
//90-50 is the expected ending percent minus the percent complete entering individual item processing.&#xD;
//Since 90 is the next percent after this update, we will calibrate the dynamic values off of 89.&#xD;
props['globalPercentIncrement'] = (props['globalTotalItems'] > 0) ? ((89 - props['globalStartingCompletion']) / props['globalTotalItems']) : 0;</cc:expression>
                    <cc:expression>props['globalUpdateIteration'] = 1;</cc:expression>
                    <cc:expression>props['globalApiCalls'] = 0;&#xD;
props['globalApiDeferrals'] = 0;&#xD;
props['globalSuccessfulEnrollments'] = 0;&#xD;
props['globalSuccessfulRescinds'] = 0;</cc:expression>
                    <cc:expression>vars['globalOutputData'] = '';</cc:expression>
                    <cc:expression>props['localEmployeeID'] = '';&#xD;
props['localCourseID'] = '';&#xD;
props['localEventWID'] = '';</cc:expression>
                </cc:eval>
                <cc:eval id="UpdateDebug">
                    <cc:expression>props['globalDebugPropertyList'].add('localEmployeeID');&#xD;
props['globalDebugPropertyList'].add('localCourseID');&#xD;
props['globalDebugPropertyList'].add('localEventWID');</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_ProcessEnrollments" store-message="none" routes-response-to="Call_LaunchNewEvent" endpoint="vm://INT133_Learning_Enrollment_Boomerang/ProcessEnrollments"/>
        <cc:local-in id="LoadDataFromReports" routes-to="Call_CallRaaS_Courses"/>
        <cc:local-out id="Call_LoadDataFromReports" store-message="none" execute-when="props['globalPredecessorWID'] == empty" routes-response-to="Call_LoadDataFromFile" endpoint="vm://INT133_Learning_Enrollment_Boomerang/LoadDataFromReports"/>
        <cc:async-mediation id="LoadFile_AbortOnError_111" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="LoadFile_Handler_111" routes-to="LoadFile_AbortOnError_111">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_LoadFile_Error_111" store-message="none" routes-response-to="LoadFile_Handler_111" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while reading the input file.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber" value="props['inFileCounter']"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="LoadFile_111">
            <cc:steps>
                <cc:eval id="ReadFileIntoVar">
                    <cc:expression>da.toVar(props['inFilename'], 'globalData');</cc:expression>
                </cc:eval>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_LoadFile_Error_111"/>
        </cc:async-mediation>
        <cc:local-in id="LoadFile" routes-to="LoadFile_111" access="public">
            <cc:parameter default="1" documentation="The numeric position of the file in the set of input files to be loaded.  This will match to the /Metadata/File/Counter value in vars[globalDAMetadata] as constructed by GetDocumentList.  If there is only one file, then this should be passed as a 1." name="inFileCounter" required="true" type="integer" validation="props['inFileCounter'] > 0"/>
            <cc:parameter name="inFilename" required="true" type="string"/>
            <cc:parameter default="false" documentation="Controls whether or not the abort flag is set on the context upon an error.  If this is set to true and an error occurs, then...  If the calling local-out is set to Propagate Abort = true on the Advanced tab, then the calling assembly will also abort.  If the calling local-out is set to Propagate Abort = false, then the calling assembly will not be aborted.  However, further calls into this sub-assembly will result in a &quot;Loop-detected in local-in&quot; exception being thrown to the top level error handler." name="inIsAbortOnError" required="false" type="boolean"/>
        </cc:local-in>
        <cc:async-mediation id="Teardown_110">
            <cc:steps>
                <cc:eval id="CleanUp">
						<cc:expression>foreach (propname : ['localDACount','localExtraSupportData']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
					</cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="Finally_110" routes-to="Teardown_110"/>
        <cc:aggregator id="AggregateRows_110" collate-when="props['inCollate']" force-batch-on-last-message="false" force-batch-when="props['inBatch']">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:xml-message-content-collater output="variable" output-mimetype="text/xml" output-variable="globalDAMetadata">
        <cc:header-text>&lt;Metadata></cc:header-text>
        <cc:footer-text>&lt;/Metadata></cc:footer-text>
      </cc:xml-message-content-collater>
        </cc:aggregator>
        <cc:local-in id="AggregateMetadata_110" routes-to="AggregateRows_110">
            <cc:parameter default="true" name="inCollate" required="true" type="boolean"/>
            <cc:parameter default="false" name="inBatch" required="true" type="boolean"/>
        </cc:local-in>
        <cc:async-mediation id="SingleFileProceed_InitializeAndFinalize_AbortOnError_110" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="SingleFileProceed_InitializeAndFinalize_Handler_110" routes-to="SingleFileProceed_InitializeAndFinalize_AbortOnError_110">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="SingleFileProceed_InitializeAndFinalize_Finally_110" store-message="none" routes-response-to="SingleFileProceed_InitializeAndFinalize_Handler_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_110">
            
            
            
            
            
            
            
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_SingleFileProceed_InitializeAndFinalize_Error_110" store-message="none" routes-response-to="SingleFileProceed_InitializeAndFinalize_Finally_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while reading the input file and generating the metadata.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:sync-mediation id="SingleFileProceed_InitializeAndFinalize_110">
            <cc:request-steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localRetrievedFilename'] = (props['inRetrievalDocTag'] == empty) ? da.allFileNames.get(0) : da.getFileNames(props['inRetrievalDocTag']).get(0);</cc:expression>
                </cc:eval>
                <cc:eval id="UpdateDebug">
                    <cc:expression>props['globalDebugPropertyList'].add('localRetrievedFilename');</cc:expression>
                </cc:eval>
                <cc:write id="WriteDocumentAccessorMetadata" output="variable" output-mimetype="text/xml" output-variable="globalDAMetadata">
                    <cc:message>
                        <cc:text>&lt;Metadata>&#xD;
	&lt;File>&#xD;
		&lt;Counter>0&lt;/Counter>&#xD;
		&lt;Name>@{props['localRetrievedFilename']}&lt;/Name>&#xD;
	&lt;/File>&#xD;
&lt;/Metadata>	</cc:text>
                    </cc:message>
                </cc:write>
            </cc:request-steps>
            <cc:response-steps>
                <cc:eval id="CleanUp">
                    <cc:expression>foreach (propname : ['localRetrievedFilename']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
                </cc:eval>
                <cc:eval id="ReduceDebug">
                    <cc:expression>props['globalDebugPropertyList'].add('localRetrievedFilename');</cc:expression>
                </cc:eval>
            </cc:response-steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_SingleFileProceed_InitializeAndFinalize_Error_110"/>
        </cc:sync-mediation>
        <cc:local-out id="Call_CreateLogEntry_SingleFileProceed_Info_110" store-message="none" routes-response-to="SingleFileProceed_InitializeAndFinalize_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'A Document Retrieval Service file was found and loaded.'"/>
            <cc:set name="inLogMessageDetail" value="props['localDACount'] # ' file(s) were found as generated from the Document Retrieval Service on the BP.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'info'"/>
            <cc:set name="inExtraLocalIn" value="'RouteOnCount_110(SingleFileProceed)'"/>
            <cc:set name="inExtraRecordNumber" value="props['localDACount']"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
        </cc:local-out>
        <cc:local-out id="Call_AggregateMetadata_Append_110" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/AggregateMetadata_110">
            <cc:set name="inCollate" value="true"/>
            <cc:set name="inBatch" value="false"/>
        </cc:local-out>
        <cc:async-mediation id="MultipleFilesProceed_Iterate_Handler_110">
            <cc:steps>
                <cc:eval id="ClearError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                    <cc:expression>context.setException(null);</cc:expression>
                    <cc:expression>context.setErrorComponentId(null);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_MultipleFilesProceed_Iterate_Error_110" store-message="none" routes-response-to="MultipleFilesProceed_Iterate_Handler_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while building the input file metadata.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="'The error occurred on iteration loop '# String.valueOf(props['localFileCounter']) #'.  This file will be skipped and processing will attempt to resume with the next file.'"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="MultipleFilesProceed_Iterate_110" routes-to="Call_AggregateMetadata_Append_110" continue-after-error="rewind" handle-downstream-errors="true">
            <cc:steps>
                <cc:eval id="SetValues">
                    <cc:expression>props['localRetrievedFilename'] = props['localRetrievedFilenames'].get(props['localFileCounter']);</cc:expression>
                </cc:eval>
                <cc:write id="WriteDocumentAccessorMetadata">
                    <cc:message>
                        <cc:text>&lt;File>&#xD;
	&lt;Counter>@{props['localFileCounter']}&lt;/Counter>&#xD;
	&lt;Name>@{props['localRetrievedFilename']}&lt;/Name>&#xD;
&lt;/File></cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_MultipleFilesProceed_Iterate_Error_110"/>
        </cc:async-mediation>
        <cc:route id="MultipleFilesProceed_ForLoop_110">
            <cc:loop-strategy condition="props['localFileCounter'] &lt; props['localDACount']" increment="props['localFileCounter'] = props['localFileCounter'] + 1" init="props['localFileCounter'] = 0"/>
            <cc:sub-route name="Iterate" routes-to="MultipleFilesProceed_Iterate_110"/>
        </cc:route>
        <cc:local-out id="Call_AggregateMetadata_Finalize_110" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/AggregateMetadata_110">
            <cc:set name="inCollate" value="false"/>
            <cc:set name="inBatch" value="true"/>
        </cc:local-out>
        <cc:sync-mediation id="MultipleFilesProceed_InitializeAndFinalize_110" routes-to="MultipleFilesProceed_ForLoop_110" routes-response-to="Call_AggregateMetadata_Finalize_110">
            <cc:request-steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localRetrievedFilenames'] = (props['inRetrievalDocTag'] == empty) ? da.allFileNames : da.getFileNames(props['inRetrievalDocTag']);</cc:expression>
                </cc:eval>
                <cc:eval id="UpdateDebug">
                    <cc:expression>props['globalDebugPropertyList'].add('localRetrievedFilenames');</cc:expression>
                </cc:eval>
            </cc:request-steps>
            <cc:response-steps>
                <cc:eval id="CleanUp">
                    <cc:expression>foreach (propname : ['localRetrievedFilenames','localRetrievedFilename','localFileCounter']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
                </cc:eval>
                <cc:eval id="ReduceDebug">
                    <cc:expression>props['globalDebugPropertyList'].remove('localRetrievedFilenames');</cc:expression>
                </cc:eval>
            </cc:response-steps>
        </cc:sync-mediation>
        <cc:local-out id="Call_CreateLogEntry_MultipleFilesProceed_Info_110" store-message="none" routes-response-to="MultipleFilesProceed_InitializeAndFinalize_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Multiple retrieved files were found.'"/>
            <cc:set name="inLogMessageDetail" value="props['localDACount'] # ' file(s) were found as generated from the Document Retrieval Service on the BP.'"/>
            <cc:set name="inLogReferenceId" value="String.valueOf(props['localDACount'])"/>
            <cc:set name="inLogLevel" value="'info'"/>
            <cc:set name="inExtraLocalIn" value="'RouteOnCount_110(MultipleFilesProceed)'"/>
            <cc:set name="inExtraRecordNumber" value="props['localDACount']"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
        </cc:local-out>
        <cc:async-mediation id="MultipleFilesError_AbortOnError_110" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="MultipleFilesError_Handler_110" routes-to="MultipleFilesError_AbortOnError_110">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_MultipleFilesError_110" store-message="none" routes-response-to="MultipleFilesError_Handler_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_110">
            
            
            
            
            
            
            
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_MultipleFilesCountError_Error_110" store-message="none" routes-response-to="Call_Finally_MultipleFilesError_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'The expected number of files was not found!'"/>
            <cc:set name="inLogMessageDetail" value="props['localDACount'] # ' file(s) were found as generated from the Document Retrieval Service on the BP.  However, '# props['inExactFileCountExpected'] #' files(s) were expected.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="'RouteOnCount_110(MultipleFilesCountError)'"/>
            <cc:set name="inExtraRecordNumber" value="props['localDACount']"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
            <cc:set name="inExtraErrorCode" value="11002"/>
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_MultipleFilesError_Error_110" store-message="none" routes-response-to="Call_Finally_MultipleFilesError_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Too many retrieved files were found!'"/>
            <cc:set name="inLogMessageDetail" value="props['localDACount'] # ' file(s) were found as generated from the Document Retrieval Service on the BP.  Only a single file is expected.  A multiple-data condition is an error and the output of the Document Retrieval Service should be investigated.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="'RouteOnCount_110(MultipleFilesError)'"/>
            <cc:set name="inExtraRecordNumber" value="props['localDACount']"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
            <cc:set name="inExtraErrorCode" value="11001"/>
        </cc:local-out>
        <cc:async-mediation id="NoFileProceed_EmptyMetadata_110">
            <cc:steps>
                <cc:write id="WriteDocumentAccessorMetadata" output="variable" output-mimetype="text/xml" output-variable="globalDAMetadata">
                    <cc:message>
                        <cc:text>&lt;Metadata/>&#xD;
</cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_NoFileProceed_Info_110" store-message="none" routes-response-to="NoFileProceed_EmptyMetadata_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'No retrieved file was found.'"/>
            <cc:set name="inLogMessageDetail" value="props['localDACount'] # ' file(s) were found as generated from the Document Retrieval Service on the BP.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'info'"/>
            <cc:set name="inExtraLocalIn" value="'RouteOnCount_110(NoFileProceed)'"/>
            <cc:set name="inExtraRecordNumber" value="0"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
        </cc:local-out>
        <cc:async-mediation id="NoFileError_AbortOnError_110" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="NoFileError_Handler_110" routes-to="NoFileError_AbortOnError_110">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_NoFileError_110" store-message="none" routes-response-to="NoFileError_Handler_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_110">
            
            
            
            
            
            
            
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_NoFileError_Error_110" store-message="none" routes-response-to="Call_Finally_NoFileError_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'No retrieved file was found!'"/>
            <cc:set name="inLogMessageDetail" value="props['localDACount'] # ' file(s) were found as generated from the Document Retrieval Service on the BP.  Data is expected.  A no-data condition is an error and the output of the Document Retrieval Service should be investigated.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="'RouteOnCount_110(NoFileError)'"/>
            <cc:set name="inExtraRecordNumber" value="0"/>
            <cc:set name="inExtraSupportData" value="props['localExtraSupportData']"/>
            <cc:set name="inExtraErrorCode" value="11000"/>
        </cc:local-out>
        <cc:route id="RouteOnCount_110">
            <cc:mvel-strategy>
                <cc:choose-route expression="props['inNoFileThrowsException'] == true &amp;&amp; props['localDACount'] == 0" route="NoFileError"/>
                <cc:choose-route expression="props['inNoFileThrowsException'] == false &amp;&amp; props['localDACount'] == 0" route="NoFileProceed"/>
                <cc:choose-route expression="props['inMultipleFilesThrowsException'] == true &amp;&amp; props['localDACount'] > 1" route="MultipleFilesError"/>
                <cc:choose-route expression="props['inMultipleFilesThrowsException'] == false &amp;&amp; props['inExactFileCountExpected'] > 0 &amp;&amp; (props['localDACount'] != props['inExactFileCountExpected'])" route="MultipleFilesCountError"/>
                <cc:choose-route expression="props['inMultipleFilesThrowsException'] == false &amp;&amp; (props['inExactFileCountExpected'] == -1 || props['localDACount'] == props['inExactFileCountExpected']) &amp;&amp; props['localDACount'] > 1" route="MultipleFilesProceed"/>
                <cc:choose-route expression="true" route="SingleFileProceed"/>
            </cc:mvel-strategy>
            <cc:sub-route name="NoFileError" routes-to="Call_CreateLogEntry_NoFileError_Error_110"/>
            <cc:sub-route name="NoFileProceed" routes-to="Call_CreateLogEntry_NoFileProceed_Info_110"/>
            <cc:sub-route name="MultipleFilesError" routes-to="Call_CreateLogEntry_MultipleFilesError_Error_110"/>
            <cc:sub-route name="MultipleFilesCountError" routes-to="Call_CreateLogEntry_MultipleFilesCountError_Error_110"/>
            <cc:sub-route name="MultipleFilesProceed" routes-to="Call_CreateLogEntry_MultipleFilesProceed_Info_110"/>
            <cc:sub-route name="SingleFileProceed" routes-to="Call_CreateLogEntry_SingleFileProceed_Info_110"/>
        </cc:route>
        <cc:async-mediation id="DocumentAccessor_AbortOnError_110" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="DocumentAccessor_Handler_110" routes-to="DocumentAccessor_AbortOnError_110">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                    <cc:expression>context.setErrorComponentId(null);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_DocumentAccessor_110" store-message="none" routes-response-to="DocumentAccessor_Handler_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_110">
            
            
            
            
            
            
            
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_DocumentAccessor_Error_110" store-message="none" routes-response-to="Call_Finally_DocumentAccessor_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'GetEventDocuments Processing Error'"/>
            <cc:set name="inLogMessageDetail" value="'An error occurred while parsing the Get_Event_Documents response.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:async-mediation id="DocumentAccessor_110" routes-to="RouteOnCount_110" handle-downstream-errors="true">
            <cc:steps>
                <cc:eval id="SetValues">
                    <cc:expression>props['localDACount'] = (props['inRetrievalDocTag'] == empty) ? da.size() : da.size(props['inRetrievalDocTag']);</cc:expression>
                    <cc:expression>props['localExtraSupportData'] = (props['inRetrievalDocTag'] != empty) ? 'Document Tag filter = ['# props['inRetrievalDocTag'] #']' : '';</cc:expression>
                </cc:eval>
                <cc:eval id="UpdateDebug">
                    <cc:expression>props['globalDebugPropertyList'].add('localDACount');&#xD;
props['globalDebugPropertyList'].add('localExtraSupportData');</cc:expression>
                </cc:eval>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_DocumentAccessor_Error_110"/>
        </cc:async-mediation>
        <cc:local-out id="GetEventDocuments_110" routes-response-to="DocumentAccessor_110" endpoint="vm://wcc/GetEventDocuments">
            <cc:set name="ie.event.wid" value="props['inEventWID']"/>
        </cc:local-out>
        <cc:async-mediation id="InitializeAndFinalize_AbortOnError_110" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="InitializeAndFinalize_Handler_110" routes-to="InitializeAndFinalize_AbortOnError_110">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                    <cc:expression>context.setErrorComponentId(null);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_Finally_InitializeAndFinalize_110" store-message="none" routes-response-to="InitializeAndFinalize_Handler_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_110">
            
            
            
            
            
            
            
        </cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_InitializeAndFinalize_Error_110" store-message="none" routes-response-to="Call_Finally_InitializeAndFinalize_110" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'GetEventDocuments Execution Error'"/>
            <cc:set name="inLogMessageDetail" value="'An error occurred while calling Get_Event_Documents.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:sync-mediation id="InitializeAndFinalize_110" routes-to="GetEventDocuments_110" handle-downstream-errors="true" routes-response-to="Call_Finally_110">
            <cc:request-steps/>
            <cc:response-steps>
            </cc:response-steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_InitializeAndFinalize_Error_110"/>
        </cc:sync-mediation>
        <cc:local-out id="Call_Finally_110" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Finally_110">
            
            
            
            
            
            
            
        </cc:local-out>
        <cc:local-in id="GetDocumentList" routes-to="InitializeAndFinalize_110" access="public">
            <cc:parameter default="lp.isSet() ? lp.getIntegrationEventWID() : null" documentation="WID of the Integration Event from which the documents will be queried.  This is typically the current event, and as such, is defaulted to the current event WID.  However, changing this WID enables retrieving documents from another related event for processing." name="inEventWID" required="true" type="string"/>
            <cc:parameter default="true" documentation="Controls whether or not an exception is thrown when there are no input files to the Integration Event.  TRUE means an exception will be thrown.  FALSE means no exception will be thrown." name="inNoFileThrowsException" required="true" type="boolean"/>
            <cc:parameter default="true" documentation="Controls whether or not an exception is thrown when there are multiple input files to the Integration Event.  TRUE means an exception will be thrown.  FALSE means no exception will be thrown." name="inMultipleFilesThrowsException" required="true" type="boolean"/>
            <cc:parameter default="-1" documentation="Specifies an exact number of files to be expected on the Integration Event.  If a variable number of input files is supported, then this should be passed as -1." name="inExactFileCountExpected" required="false" type="integer" validation="props['inExactFileCountExpected'] == -1 || props['inExactFileCountExpected'] > 0"/>
            <cc:parameter default="props['globalRetrievalDocTag']" documentation="Specifies a Document Tag for filtering the input files on the Integration Event.  If not specified, parameter will try to use the value of the Retrieval Document Tag Integration Attribute." name="inRetrievalDocTag" required="false" type="string"/>
            <cc:parameter default="false" documentation="Controls whether or not the abort flag is set on the context upon an error.  If this is set to true and an error occurs, then...  If the calling local-out is set to Propagate Abort = true on the Advanced tab, then the calling assembly will also abort.  If the calling local-out is set to Propagate Abort = false, then the calling assembly will not be aborted.  However, further calls into this sub-assembly will result in a &quot;Loop-detected in local-in&quot; exception being thrown to the top level error handler." name="inIsAbortOnError" required="false" type="boolean"/>
        </cc:local-in>
        <cc:local-out id="Call_LaunchNewEvent" store-message="none" execute-when="vars['globalOutputData'].isXml()" routes-response-to="Call_CreateLogEntry_EnrollmentStats_Info" endpoint="vm://INT133_Learning_Enrollment_Boomerang/LaunchNewEvent"/>
        <cc:local-in id="LaunchNewEvent" routes-to="Call_GenerateOutput"/>
        <cc:local-out id="PIM_Tag_106" execute-when="props['inOutputIsDeliverable'] == true || props['inOutputDocumentTag'] != empty" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Saved file '# props['localFilename'] #' to the Integration Event.'"/>
            <cc:set name="is.document.file.name" value="props['localFilename']"/>
            <cc:set name="is.document.deliverable" value="props['inOutputIsDeliverable'] ? 'true' : 'false'"/>
            <cc:set name="is.message.storage.enabled" value="false"/>
            <cc:set name="is.document.labels" value="props['inOutputDocumentTag']"/>
            <cc:set name="is.document.variable.name" value="'globalOutputData'"/>
            <cc:set name="is.event.wid" value="props['inTargetEventWID']"/>
        </cc:local-out>
        <cc:async-mediation id="InitializeAndFinalize_AbortOnError_106" execute-steps-when="props['inIsAbortOnError']">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="InitializeAndFinalize_Handler_106" routes-to="InitializeAndFinalize_AbortOnError_106">
            <cc:steps>
                <cc:eval id="HandleError">
                    <cc:expression>context.setErrorHandled(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_InitializeAndFinalize_Error_106" store-message="none" routes-response-to="InitializeAndFinalize_Handler_106" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'An error occurred while storing data to the Integration Event.'"/>
            <cc:set name="inLogMessageDetail" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'error'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:sync-mediation id="InitializeAndFinalize_106" routes-to="PIM_Tag_106">
            <cc:request-steps>
                <cc:eval id="InitValues">
                    <cc:expression>props['localFilename'] = props['inOutputFilename'] #'.'# props['inOutputFileExtension'];</cc:expression>
                </cc:eval>
                <cc:store id="StoreContent" output="variable" output-mimetype="text/xml" output-variable="globalOutputData" input="variable" input-variable="globalOutputData" createDocumentReference="true" expiresIn="@{props['globalDocumentRetentionPeriod']}" title="@{props['localFilename']}"/>
            </cc:request-steps>
            <cc:response-steps>
                <cc:eval id="CleanUp">
                    <cc:expression>foreach (propname : ['localFilename']) {&#xD;
	context.removeProperty(propname);&#xD;
}</cc:expression>
                </cc:eval>
            </cc:response-steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_InitializeAndFinalize_Error_106"/>
        </cc:sync-mediation>
        <cc:local-in id="GenerateOutput" routes-to="InitializeAndFinalize_106" access="public">
            <cc:parameter default="lp.isSet() ? lp.getIntegrationEventWID() : null" name="inTargetEventWID" required="true" type="string"/>
            <cc:parameter default="props['globalOutputFilename']" name="inOutputFilename" required="true" type="string"/>
            <cc:parameter default="'xml'" name="inOutputFileExtension" required="true" type="string" validation="props['inOutputFileExtension'] == 'xml' || props['inOutputFileExtension'] == 'xml.pgp' ||&#xD;&#xA;props['inOutputFileExtension'] == 'csv' || props['inOutputFileExtension'] == 'csv.pgp' ||&#xD;&#xA;props['inOutputFileExtension'] == 'txt' || props['inOutputFileExtension'] == 'txt.pgp'"/>
            <cc:parameter name="inOutputDocumentTag" required="false" type="string"/>
            <cc:parameter name="inOutputIsDeliverable" required="true" type="boolean"/>
            <cc:parameter default="false" documentation="Controls whether or not the abort flag is set on the context upon an error.  If this is set to true and an error occurs, then...  If the calling local-out is set to Propagate Abort = true on the Advanced tab, then the calling assembly will also abort.  If the calling local-out is set to Propagate Abort = false, then the calling assembly will not be aborted.  However, further calls into this sub-assembly will result in a &quot;Loop-detected in local-in&quot; exception being thrown to the top level error handler." name="inIsAbortOnError" required="false" type="boolean"/>
        </cc:local-in>
        <cc:local-out id="Call_GenerateOutput" store-message="none" routes-response-to="RouteLaunch" endpoint="vm://INT133_Learning_Enrollment_Boomerang/GenerateOutput"><cc:set name="inOutputFilename" value="props['globalOutputFilename']"/><cc:set name="inOutputFileExtension" value="'xml'"/><cc:set name="inOutputDocumentTag" value="props['globalDeliveryDocTag']"/><cc:set name="inOutputIsDeliverable" value="false"/><cc:set name="inIsAbortOnError" value="false"/></cc:local-out>
        <cc:async-mediation id="PrepareEventSoap" routes-to="Call_CallSoap_EventLaunch">
            <cc:steps>
                <cc:write id="WriteRequest">
                    <cc:message>
                        <cc:text>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xD;
&lt;soapenv:Envelope xmlns:wd=&quot;urn:com.workday/bsvc&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;>&#xD;
   &lt;soapenv:Header>&#xD;
      &lt;wd:Workday_Common_Header>&#xD;
         &lt;wd:Include_Reference_Descriptors_In_Response>true&lt;/wd:Include_Reference_Descriptors_In_Response>&#xD;
      &lt;/wd:Workday_Common_Header>&#xD;
   &lt;/soapenv:Header>&#xD;
   &lt;soapenv:Body>&#xD;
      &lt;wd:Launch_Integration_Event_Request wd:Debug_Mode=&quot;false&quot; wd:version=&quot;@{props['globalApiVersion']}&quot;>&#xD;
         &lt;wd:Integration_System_Reference>&#xD;
            &lt;wd:ID wd:type=&quot;WID&quot;>@{lp.integrationSystemRefWID}&lt;/wd:ID>&#xD;
         &lt;/wd:Integration_System_Reference>&#xD;
         &lt;wd:Integration_Launch_Parameter_Data>&#xD;
            &lt;wd:Launch_Parameter_Reference>&#xD;
               &lt;wd:ID wd:type=&quot;Launch_Parameter_Name&quot; wd:parent_id=&quot;@{lp.integrationSystemRefWID}&quot; wd:parent_type=&quot;WID&quot;>Predecessor Integration Event ID&lt;/wd:ID>&#xD;
            &lt;/wd:Launch_Parameter_Reference>&#xD;
            &lt;wd:Launch_Parameter_Value_Data>&#xD;
               &lt;wd:Text>@{lp.integrationEventWID}&lt;/wd:Text>&#xD;
            &lt;/wd:Launch_Parameter_Value_Data>&#xD;
         &lt;/wd:Integration_Launch_Parameter_Data>&#xD;
         &lt;wd:Integration_Launch_Parameter_Data>&#xD;
            &lt;wd:Launch_Parameter_Reference>&#xD;
               &lt;wd:ID wd:type=&quot;Launch_Parameter_Name&quot; wd:parent_id=&quot;@{lp.integrationSystemRefWID}&quot; wd:parent_type=&quot;WID&quot;>Run in Validation Mode&lt;/wd:ID>&#xD;
            &lt;/wd:Launch_Parameter_Reference>&#xD;
            &lt;wd:Launch_Parameter_Value_Data>&#xD;
               &lt;wd:Boolean>@{props['globalIsValidationMode']}&lt;/wd:Boolean>&#xD;
            &lt;/wd:Launch_Parameter_Value_Data>&#xD;
         &lt;/wd:Integration_Launch_Parameter_Data>&#xD;
         &lt;wd:Integration_Launch_Parameter_Data>&#xD;
            &lt;wd:Launch_Parameter_Reference>&#xD;
               &lt;wd:ID wd:type=&quot;Launch_Parameter_Name&quot; wd:parent_id=&quot;@{lp.integrationSystemRefWID}&quot; wd:parent_type=&quot;WID&quot;>Run with Debug Logging&lt;/wd:ID>&#xD;
            &lt;/wd:Launch_Parameter_Reference>&#xD;
            &lt;wd:Launch_Parameter_Value_Data>&#xD;
               &lt;wd:Boolean>@{props['globalIsDebugMode']}&lt;/wd:Boolean>&#xD;
            &lt;/wd:Launch_Parameter_Value_Data>&#xD;
         &lt;/wd:Integration_Launch_Parameter_Data>&#xD;
      &lt;/wd:Launch_Integration_Event_Request>&#xD;
   &lt;/soapenv:Body>&#xD;
&lt;/soapenv:Envelope></cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CallSoap_EventLaunch" store-message="none" routes-response-to="GetEventReference" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CallSoap"><cc:set name="inApiVersion" value="props['globalApiVersion']"/><cc:set name="inWebServiceApplication" value="'Integrations'"/><cc:set name="inUseMessageRootPartAsRequest" value="true"/><cc:set name="inValidateOnly" value="props['globalIsValidationMode']"/><cc:set name="inDebugMode" value="props['globalIsDebugMode']"/><cc:set name="inIsAbortOnError" value="false"/></cc:local-out>
        <cc:async-mediation id="GetEventReference" routes-to="Call_CreateLogEntry_CallSoapEventLaunch_WarnOrInfo">
            <cc:steps>
                <cc:eval id="SetValues">
                    <cc:expression>props['localEventReference'] = vars['globalSoapResults'].xpath('/env:Envelope/env:Body/wd:Launch_Integration_Event_Response/wd:Integration_Event/wd:Integration_Event_Reference/wd:ID[@wd:type=&quot;WID&quot;]');</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_CallSoapEventLaunch_WarnOrInfo" store-message="none" execute-when="props['localEventReference'] != empty" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Started New Integration Event'"/>
            <cc:set name="inLogMessageDetail" value="'Started new integration event to continue processing API enrollments in excess of the current threshold limit.'"/>
            <cc:set name="inLogReferenceId" value="props['localEventReference']"/>
            <cc:set name="inLogLevel" value="props['globalIsNewEventWarning'] ? 'warn' : 'info'"/>
        </cc:local-out>
        <cc:local-out id="Call_LoadDataFromFile" store-message="none" execute-when="props['globalPredecessorWID'] != empty" routes-response-to="Call_ProcessEnrollments" endpoint="vm://INT133_Learning_Enrollment_Boomerang/LoadDataFromFile"/>
        <cc:local-in id="LoadDataFromFile" routes-to="Call_GetDocumentList"/>
        <cc:local-out id="Call_GetDocumentList" store-message="none" routes-response-to="Call_LoadFile" endpoint="vm://INT133_Learning_Enrollment_Boomerang/GetDocumentList"><cc:set name="inEventWID" value="props['globalPredecessorWID']"/><cc:set name="inNoFileThrowsException" value="true"/><cc:set name="inMultipleFilesThrowsException" value="true"/><cc:set name="inExactFileCountExpected" value="1"/><cc:set name="inRetrievalDocTag" value="props['globalDeliveryDocTag']"/><cc:set name="inIsAbortOnError" value="true"/></cc:local-out>
        <cc:local-out id="Call_LoadFile" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/LoadFile"><cc:set name="inFileCounter" value="1"/><cc:set name="inFilename" value="props['globalOutputFilename'] # '.xml'"/><cc:set name="inIsAbortOnError" value="true"/></cc:local-out>
        <cc:local-out id="Call_AggregateDeferredApi" store-message="none" routes-response-to="ResetIteration" endpoint="vm://INT133_Learning_Enrollment_Boomerang/AggregateDeferredApi"><cc:set name="inCollate" value="true"/><cc:set name="inBatch" value="util.isLastMessageInBatch()"/></cc:local-out>
        <cc:local-in id="AggregateDeferredApi" routes-to="Call_CreateLogEntry_Defer_Info"><cc:parameter default="true" name="inCollate" required="true" type="boolean"/><cc:parameter default="false" name="inBatch" required="true" type="boolean"/></cc:local-in>
        <cc:local-in id="ExecuteEnrollmentApi" routes-to="PrepareSoapRequest_Enroll"><cc:parameter default="parts[0].xpath('/wd:Enroll_In_Learning_Course_Request/wd:Enroll_In_Learning_Course_Data/wd:Learning_Course_Reference/wd:ID[@wd:type=&quot;WID&quot;]')" name="inCourseId" required="false" type="string"/><cc:parameter default="parts[0].xpath('/wd:Enroll_In_Learning_Course_Request/wd:Enroll_In_Learning_Course_Data/wd:Learner_Reference/wd:ID[@wd:type=&quot;Employee_ID&quot;]')" name="inLearnerId" required="false" type="string"/></cc:local-in>
        <cc:local-out id="Call_ExecuteEnrollmentApi" store-message="none" routes-response-to="ResetIteration" endpoint="vm://INT133_Learning_Enrollment_Boomerang/ExecuteEnrollmentApi"><cc:set name="inLearnerId" value="parts[0].xpath('/wd:Enroll_In_Learning_Course_Request/wd:Enroll_In_Learning_Course_Data/wd:Learner_Reference/wd:ID[@wd:type=&quot;Employee_ID&quot;]')"/><cc:set name="inCourseId" value="parts[0].xpath('/wd:Enroll_In_Learning_Course_Request/wd:Enroll_In_Learning_Course_Data/wd:Learning_Course_Reference/wd:ID[@wd:type=&quot;WID&quot;]')"/></cc:local-out>
        <cc:local-out id="Call_CreateLogEntry_EnrollmentStats_Info" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'API and Enrollment Stats'"/>
            <cc:set name="inLogMessageDetail" value="'This integration attempted ' # props['globalApiCalls'] # ' total API calls.  Of that number, ' # props['globalSuccessfulEnrollments'] # ' were successful enrollments and ' # props['globalSuccessfulRescinds'] # ' were successful business process rescinds.  ' # props['globalApiDeferrals'] # ' API calls were deferred.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'info'"/>
        </cc:local-out>
        <cc:async-mediation id="UpdateApiStats_Enroll" routes-to="Call_ExecuteEnrollmentApi">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['globalApiCalls'] = props['globalApiCalls'] + 1;</cc:expression>
                    <cc:expression>props['localEmployeeID'] = parts[0].xpath('/wd:Enroll_In_Learning_Course_Request/wd:Enroll_In_Learning_Course_Data/wd:Learner_Reference/wd:ID[@wd:type=&quot;Employee_ID&quot;]');&#xD;
props['localCourseID'] = parts[0].xpath('/wd:Enroll_In_Learning_Course_Request/wd:Enroll_In_Learning_Course_Data/wd:Learning_Course_Reference/wd:ID[@wd:type=&quot;WID&quot;]');</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="UpdateDeferredStats" routes-to="Call_AggregateDeferredApi">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['globalApiDeferrals'] = props['globalApiDeferrals'] + 1;</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:route id="RouteLaunch">
            <cc:mvel-strategy>
                <cc:choose-route expression="props['globalDoNotLaunch']" route="DoNotLaunch"/>
                <cc:choose-route expression="true" route="Launch"/>
            </cc:mvel-strategy>
            <cc:sub-route name="DoNotLaunch" routes-to="Call_CreateLogEntry_DoNotLaunch_Info"/>
            <cc:sub-route name="Launch" routes-to="PrepareEventSoap"/>
        </cc:route>
        <cc:local-out id="Call_CreateLogEntry_DoNotLaunch_Info" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'Cancelled Launch of New Event'"/>
            <cc:set name="inLogMessageDetail" value="'Integration Attribute was set to suppress the launching of a new event.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'info'"/>
        </cc:local-out>
        <cc:async-mediation id="ValidateCampaignResults" routes-to="ProcessCampaignData">
            <cc:steps>
                <cc:validate-xpath id="ValidateCampaigns" input="variable" input-variable="globalRaaSResults" xpath="/*:Report_Data/*:Report_Entry[1]"/>
            </cc:steps>
            <cc:send-error id="CatchError" routes-to="Call_CreateLogEntry_ValidateCampaignResults_Warn"/>
        </cc:async-mediation>
        <cc:async-mediation id="ValidateCampaignResults_AbortOnError">
            <cc:steps>
                <cc:eval id="SetAbort">
                    <cc:expression>context.setAbort(true);</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_ValidateCampaignResults_Warn" store-message="none" routes-response-to="ValidateCampaignResults_AbortOnError" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry">
            <cc:set name="inLogMessage" value="'No Campaigns Found'"/>
            <cc:set name="inLogMessageDetail" value="'No Campaigns were found to query for missing enrollments.  At least one Campaign is assumed would be present.'"/>
            <cc:set name="inLogReferenceId"/>
            <cc:set name="inLogLevel" value="'warn'"/>
            <cc:set name="inExtraLocalIn" value="context.errorComponentId"/>
            <cc:set name="inExtraRecordNumber"/>
            <cc:set name="inExtraSupportData" value="(context.getErrorMessage() != empty) ? context.getErrorMessage() : context.exception.message"/>
            <cc:set name="inExtraErrorCode" value="context.errorCode"/>
        </cc:local-out>
        <cc:local-in id="ExecuteRescindApi" routes-to="PrepareSoapRequest_Rescind"><cc:parameter documentation="The WID of the enrollment event to be rescinded" name="inEventWID" required="true" type="string"/></cc:local-in>
        <cc:async-mediation id="PrepareSoapRequest_Rescind" routes-to="Call_Debug_Message_SoapRequest_Rescind">
            <cc:steps>
                <cc:wrap-soap id="WrapSoap"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="UpdateApiStats_Rescind" routes-to="Call_ExecuteRescindApi">
            <cc:steps>
                <cc:eval id="UpdateValues">
                    <cc:expression>props['globalApiCalls'] = props['globalApiCalls'] + 1;</cc:expression>
                    <cc:expression>props['localEventWID'] = parts[0].xpath('/wd:Rescind_Business_Process_Request/wd:Event_Reference/wd:ID[@wd:type=&quot;WID&quot;]');</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_ExecuteRescindApi" store-message="none" routes-response-to="ResetIteration" endpoint="vm://INT133_Learning_Enrollment_Boomerang/ExecuteRescindApi"><cc:set name="inEventWID" value="props['localEventWID']"/></cc:local-out>
        <cc:local-out id="Call_Debug_Message_SoapRequest_Rescind" store-message="none" execute-when="props['globalIsDebugMode']" routes-response-to="Call_CallSoap_Rescind" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug"><cc:set name="inTargetType" value="'message'"/><cc:set name="inEntityName" value="'SOAP-Request__Integrations-Rescind_Business_Process'"/></cc:local-out>
        <cc:local-out id="Call_CallSoap_Rescind" store-message="none" routes-response-to="Call_Debug_Variable_GlobalSoapResults_Rescind" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CallSoap"><cc:set name="inApiVersion" value="props['globalApiVersion']"/><cc:set name="inWebServiceApplication" value="'Integrations'"/><cc:set name="inUseMessageRootPartAsRequest" value="true"/><cc:set name="inValidateOnly" value="props['globalIsValidationMode']"/><cc:set name="inDebugMode" value="props['globalIsDebugMode']"/><cc:set name="inIsAbortOnError" value="false"/><cc:set name="inLearnerId" value="''"/><cc:set name="inCourseId" value="''"/><cc:set name="inEventWID" value="props['inEventWID']"/></cc:local-out>
        <cc:local-out id="Call_Debug_Variable_GlobalSoapResults_Rescind" store-message="none" execute-when="props['globalIsDebugMode'] &amp;&amp; vars['globalSoapResults'].isXml()" routes-response-to="GetRescindResult" endpoint="vm://INT133_Learning_Enrollment_Boomerang/Debug"><cc:set name="inTargetType" value="'variable'"/><cc:set name="inTargetName" value="'globalSoapResults'"/><cc:set name="inEntityName" value="'SOAP-Response__Integrations-Rescind_Business_Process'"/></cc:local-out>
        <cc:async-mediation id="GetRescindResult" routes-to="Call_CreateLogEntry_CallSoapRescind_Info">
            <cc:steps>
                <cc:eval id="SetValues">
                    <cc:expression>props['globalSuccessfulRescinds'] = props['globalSuccessfulRescinds'] + 1;</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="Call_CreateLogEntry_CallSoapRescind_Info" store-message="none" endpoint="vm://INT133_Learning_Enrollment_Boomerang/CreateLogEntry"><cc:set name="inLogMessage" value="'Successfully Rescinded Enrollment'"/><cc:set name="inLogMessageDetail" value="'Enrollment rescinded for business process event with WID =  ' # props['inEventWID']"/><cc:set name="inLogLevel" value="'info'"/></cc:local-out>
	</cc:assembly>

</beans>
